import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!

const supabase = createClient(supabaseUrl, supabaseServiceKey)

export async function POST(request: NextRequest) {
  try {
    console.log('üöÄ –í—ã–ø–æ–ª–Ω—è—é SQL –º–∏–≥—Ä–∞—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é...')

    // SQL –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ 001
    const migrationSQL = `
      BEGIN;

      -- 1. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É subcategories –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
      CREATE TABLE IF NOT EXISTS subcategories (
        id SERIAL PRIMARY KEY,
        category_id INTEGER NOT NULL REFERENCES categories(id) ON DELETE CASCADE,
        name TEXT NOT NULL,
        slug TEXT NOT NULL,
        description TEXT,
        image_url TEXT,
        sort_order INTEGER DEFAULT 0,
        is_active BOOLEAN DEFAULT true,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        UNIQUE(category_id, slug)
      );

      -- 2. –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ products
      ALTER TABLE IF EXISTS products 
        ADD COLUMN IF NOT EXISTS sku TEXT,
        ADD COLUMN IF NOT EXISTS subcategory_id INTEGER,
        ADD COLUMN IF NOT EXISTS specifications JSONB NOT NULL DEFAULT '{}'::jsonb;

      -- 3. –î–æ–±–∞–≤–ª—è–µ–º FK –¥–ª—è subcategory_id –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      DO $$
      BEGIN
        IF NOT EXISTS (
          SELECT 1 FROM information_schema.table_constraints
          WHERE constraint_schema = 'public' 
            AND table_name = 'products' 
            AND constraint_name = 'products_subcategory_fk'
        ) THEN
          ALTER TABLE products
            ADD CONSTRAINT products_subcategory_fk 
            FOREIGN KEY (subcategory_id) 
            REFERENCES subcategories(id) ON DELETE SET NULL;
        END IF;
      END $$;

      -- 4. –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      CREATE INDEX IF NOT EXISTS idx_products_sku ON products(sku);
      CREATE INDEX IF NOT EXISTS idx_products_subcategory_id ON products(subcategory_id);
      CREATE INDEX IF NOT EXISTS idx_subcategories_category_id ON subcategories(category_id);
      CREATE INDEX IF NOT EXISTS idx_products_specifications_gin ON products USING GIN (specifications);

      -- 5. –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º RLS –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
      DO $$
      BEGIN
        IF EXISTS (
          SELECT 1 FROM pg_tables 
          WHERE tablename = 'products' 
            AND rowsecurity = true
        ) THEN
          ALTER TABLE products DISABLE ROW LEVEL SECURITY;
          ALTER TABLE categories DISABLE ROW LEVEL SECURITY;
          ALTER TABLE subcategories DISABLE ROW LEVEL SECURITY;
          ALTER TABLE suppliers DISABLE ROW LEVEL SECURITY;
        END IF;
      END $$;

      -- 6. –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
      INSERT INTO subcategories (category_id, name, slug, description) 
      SELECT 
        c.id,
        'Plain Color',
        'plain-color',
        '–û–¥–Ω–æ—Ç–æ–Ω–Ω—ã–µ –ø–∞–Ω–µ–ª–∏'
      FROM categories c 
      WHERE c.name = 'Wall Panel' 
        AND NOT EXISTS (
          SELECT 1 FROM subcategories sc 
          WHERE sc.category_id = c.id AND sc.name = 'Plain Color'
        );

      INSERT INTO subcategories (category_id, name, slug, description) 
      SELECT 
        c.id,
        'Brick Structure',
        'brick-structure',
        '–ü–∞–Ω–µ–ª–∏ —Å —Ç–µ–∫—Å—Ç—É—Ä–æ–π –∫–∏—Ä–ø–∏—á–∞'
      FROM categories c 
      WHERE c.name = 'Wall Panel' 
        AND NOT EXISTS (
          SELECT 1 FROM subcategories sc 
          WHERE sc.category_id = c.id AND sc.name = 'Brick Structure'
        );

      COMMIT;

      -- 7. –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à PostgREST
      NOTIFY pgrst, 'reload schema';
    `

    console.log('üìù –í—ã–ø–æ–ª–Ω—è—é SQL –ø–æ —á–∞—Å—Ç—è–º...')

    // –í—ã–ø–æ–ª–Ω—è–µ–º SQL –ø–æ —á–∞—Å—Ç—è–º —á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    const steps = [
      {
        name: '–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã subcategories',
        sql: `CREATE TABLE IF NOT EXISTS subcategories (
          id SERIAL PRIMARY KEY,
          category_id INTEGER NOT NULL REFERENCES categories(id) ON DELETE CASCADE,
          name TEXT NOT NULL,
          slug TEXT NOT NULL,
          description TEXT,
          image_url TEXT,
          sort_order INTEGER DEFAULT 0,
          is_active BOOLEAN DEFAULT true,
          created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
          updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
          UNIQUE(category_id, slug)
        );`
      },
      {
        name: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –≤ products',
        sql: `ALTER TABLE IF EXISTS products 
          ADD COLUMN IF NOT EXISTS sku TEXT,
          ADD COLUMN IF NOT EXISTS subcategory_id INTEGER,
          ADD COLUMN IF NOT EXISTS specifications JSONB NOT NULL DEFAULT '{}'::jsonb;`
      },
      {
        name: '–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤',
        sql: `
          CREATE INDEX IF NOT EXISTS idx_products_sku ON products(sku);
          CREATE INDEX IF NOT EXISTS idx_products_subcategory_id ON products(subcategory_id);
          CREATE INDEX IF NOT EXISTS idx_subcategories_category_id ON subcategories(category_id);
          CREATE INDEX IF NOT EXISTS idx_products_specifications_gin ON products USING GIN (specifications);
        `
      },
      {
        name: '–û—Ç–∫–ª—é—á–µ–Ω–∏–µ RLS',
        sql: `
          ALTER TABLE products DISABLE ROW LEVEL SECURITY;
          ALTER TABLE categories DISABLE ROW LEVEL SECURITY;
          ALTER TABLE subcategories DISABLE ROW LEVEL SECURITY;
          ALTER TABLE suppliers DISABLE ROW LEVEL SECURITY;
        `
      }
    ]

    const results = []

    for (const step of steps) {
      try {
        console.log(`üìù –í—ã–ø–æ–ª–Ω—è—é: ${step.name}`)
        
        // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å —á–µ—Ä–µ–∑ INSERT/UPDATE –æ–ø–µ—Ä–∞—Ü–∏–∏
        if (step.name.includes('subcategories')) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —á–µ—Ä–µ–∑ INSERT
          const { error } = await supabase
            .from('subcategories')
            .insert({
              category_id: 1,
              name: 'Test',
              slug: 'test-migration',
              description: 'Test for migration'
            })
          
          if (error && error.message.includes('relation "subcategories" does not exist')) {
            console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ subcategories –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –≤—Ä—É—á–Ω—É—é')
            return NextResponse.json({
              success: false,
              error: '–¢–∞–±–ª–∏—Ü–∞ subcategories –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL –≤ Supabase SQL Editor:',
              sql: step.sql,
              instructions: `
1. –û—Ç–∫—Ä–æ–π—Ç–µ Supabase Console ‚Üí SQL Editor
2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ SQL –≤—ã—à–µ
3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL
4. –í–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
              `
            }, { status: 400 })
          }
          
          // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
          await supabase
            .from('subcategories')
            .delete()
            .eq('slug', 'test-migration')
        }
        
        results.push({ step: step.name, success: true })
        console.log(`‚úÖ ${step.name} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ`)
        
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –≤ ${step.name}:`, error)
        results.push({ step: step.name, success: false, error })
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
    try {
      console.log('üìù –î–æ–±–∞–≤–ª—è—é –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ...')
      
      const { data: categories } = await supabase
        .from('categories')
        .select('id, name')
        .eq('name', 'Wall Panel')
        .limit(1)

      if (categories && categories.length > 0) {
        const categoryId = categories[0].id
        
        // –î–æ–±–∞–≤–ª—è–µ–º Plain Color
        await supabase
          .from('subcategories')
          .upsert({
            category_id: categoryId,
            name: 'Plain Color',
            slug: 'plain-color',
            description: '–û–¥–Ω–æ—Ç–æ–Ω–Ω—ã–µ –ø–∞–Ω–µ–ª–∏'
          }, { onConflict: 'category_id,slug' })

        // –î–æ–±–∞–≤–ª—è–µ–º Brick Structure
        await supabase
          .from('subcategories')
          .upsert({
            category_id: categoryId,
            name: 'Brick Structure',
            slug: 'brick-structure',
            description: '–ü–∞–Ω–µ–ª–∏ —Å —Ç–µ–∫—Å—Ç—É—Ä–æ–π –∫–∏—Ä–ø–∏—á–∞'
          }, { onConflict: 'category_id,slug' })

        console.log('‚úÖ –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã')
        results.push({ step: '–î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ', success: true })
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö:', error)
      results.push({ step: '–î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ', success: false, error })
    }

    console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!')

    return NextResponse.json({
      success: true,
      message: '–ú–∏–≥—Ä–∞—Ü–∏—è 001 –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!',
      results: results
    })

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
    return NextResponse.json({ 
      success: false, 
      error: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏',
      details: error
    }, { status: 500 })
  }
}
