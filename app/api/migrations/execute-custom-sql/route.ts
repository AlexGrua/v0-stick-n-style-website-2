import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!

const supabase = createClient(supabaseUrl, supabaseServiceKey)

export async function POST(request: NextRequest) {
  try {
    console.log('üöÄ –í—ã–ø–æ–ª–Ω—è—é –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π SQL...')

    const body = await request.json()
    const { sql } = body

    if (!sql) {
      return NextResponse.json({
        success: false,
        error: 'SQL –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
      }, { status: 400 })
    }

    console.log('üìù –í—ã–ø–æ–ª–Ω—è—é SQL:', sql.substring(0, 100) + '...')

    // –í—ã–ø–æ–ª–Ω—è–µ–º SQL —á–µ—Ä–µ–∑ rpc
    const { data, error } = await supabase.rpc('exec_sql', { sql })

    if (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL:', error)
      return NextResponse.json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL',
        details: error
      }, { status: 500 })
    }

    console.log('‚úÖ SQL –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!')

    return NextResponse.json({
      success: true,
      message: 'SQL –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!',
      data: data
    })

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
    return NextResponse.json({ 
      success: false, 
      error: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ SQL',
      details: error
    }, { status: 500 })
  }
}

