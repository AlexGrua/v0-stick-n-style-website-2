import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!

const supabase = createClient(supabaseUrl, supabaseServiceKey)

export async function POST(request: NextRequest) {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ 001...')

    const results = []

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    console.log('üìù –ü—Ä–æ–≤–µ—Ä—è—é —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ...')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ products
    const { data: currentColumns, error: columnsError } = await supabase
      .from('information_schema.columns')
      .select('column_name, data_type, is_nullable, column_default')
      .eq('table_name', 'products')
      .in('column_name', ['sku', 'subcategory_id', 'specifications'])

    console.log('–¢–µ–∫—É—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ products:', currentColumns)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É subcategories
    const { data: currentTables, error: tablesError } = await supabase
      .from('information_schema.tables')
      .select('table_name, table_type')
      .eq('table_name', 'subcategories')

    console.log('–¢–µ–∫—É—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã:', currentTables)

    // 2. –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É subcategories —á–µ—Ä–µ–∑ INSERT
    console.log('üìù 2. –°–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—É subcategories...')
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —á–µ—Ä–µ–∑ INSERT (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ª—É—á–∏–º –æ—à–∏–±–∫—É)
    const { error: insertError } = await supabase
      .from('subcategories')
      .insert({
        category_id: 1, // –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID
        name: 'Test',
        slug: 'test',
        description: 'Test subcategory'
      })

    if (insertError && insertError.message.includes('relation "subcategories" does not exist')) {
      console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ subcategories –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –≤—Ä—É—á–Ω—É—é')
      return NextResponse.json({
        success: false,
        error: '–¢–∞–±–ª–∏—Ü–∞ subcategories –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL –≤ Supabase SQL Editor:',
        sql: `
-- –°–æ–∑–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É subcategories –≤—Ä—É—á–Ω—É—é –≤ Supabase SQL Editor:

CREATE TABLE IF NOT EXISTS subcategories (
  id SERIAL PRIMARY KEY,
  category_id INTEGER NOT NULL REFERENCES categories(id) ON DELETE CASCADE,
  name TEXT NOT NULL,
  slug TEXT NOT NULL,
  description TEXT,
  image_url TEXT,
  sort_order INTEGER DEFAULT 0,
  is_active BOOLEAN DEFAULT true,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(category_id, slug)
);

-- –î–æ–±–∞–≤—å—Ç–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ products:

ALTER TABLE IF EXISTS products 
  ADD COLUMN IF NOT EXISTS sku TEXT,
  ADD COLUMN IF NOT EXISTS subcategory_id INTEGER,
  ADD COLUMN IF NOT EXISTS specifications JSONB NOT NULL DEFAULT '{}'::jsonb;

-- –î–æ–±–∞–≤—å—Ç–µ FK —Å–≤—è–∑—å:

ALTER TABLE products
  ADD CONSTRAINT IF NOT EXISTS products_subcategory_fk 
  FOREIGN KEY (subcategory_id) 
  REFERENCES subcategories(id) ON DELETE SET NULL;

-- –°–æ–∑–¥–∞–π—Ç–µ –∏–Ω–¥–µ–∫—Å—ã:

CREATE INDEX IF NOT EXISTS idx_products_sku ON products(sku);
CREATE INDEX IF NOT EXISTS idx_products_subcategory_id ON products(subcategory_id);
CREATE INDEX IF NOT EXISTS idx_subcategories_category_id ON subcategories(category_id);
CREATE INDEX IF NOT EXISTS idx_products_specifications_gin ON products USING GIN (specifications);

-- –û—Ç–∫–ª—é—á–∏—Ç–µ RLS:

ALTER TABLE products DISABLE ROW LEVEL SECURITY;
ALTER TABLE categories DISABLE ROW LEVEL SECURITY;
ALTER TABLE subcategories DISABLE ROW LEVEL SECURITY;
ALTER TABLE suppliers DISABLE ROW LEVEL SECURITY;

-- –î–æ–±–∞–≤—å—Ç–µ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ:

INSERT INTO subcategories (category_id, name, slug, description) 
SELECT 
  c.id,
  'Plain Color',
  'plain-color',
  '–û–¥–Ω–æ—Ç–æ–Ω–Ω—ã–µ –ø–∞–Ω–µ–ª–∏'
FROM categories c 
WHERE c.name = 'Wall Panel' 
  AND NOT EXISTS (
    SELECT 1 FROM subcategories sc 
    WHERE sc.category_id = c.id AND sc.name = 'Plain Color'
  );

INSERT INTO subcategories (category_id, name, slug, description) 
SELECT 
  c.id,
  'Brick Structure',
  'brick-structure',
  '–ü–∞–Ω–µ–ª–∏ —Å —Ç–µ–∫—Å—Ç—É—Ä–æ–π –∫–∏—Ä–ø–∏—á–∞'
FROM categories c 
WHERE c.name = 'Wall Panel' 
  AND NOT EXISTS (
    SELECT 1 FROM subcategories sc 
    WHERE sc.category_id = c.id AND sc.name = 'Brick Structure'
  );

-- –û–±–Ω–æ–≤–∏—Ç–µ –∫–µ—à PostgREST:

NOTIFY pgrst, 'reload schema';
        `,
        instructions: `
1. –û—Ç–∫—Ä–æ–π—Ç–µ Supabase Console ‚Üí SQL Editor
2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ SQL –≤—ã—à–µ
3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL
4. –í–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
        `
      }, { status: 400 })
    }

    // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
    if (!insertError) {
      await supabase
        .from('subcategories')
        .delete()
        .eq('slug', 'test')
    }

    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ subcategories —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ products
    console.log('üìù 3. –ü—Ä–æ–≤–µ—Ä—è—é –∫–æ–ª–æ–Ω–∫–∏ products...')
    
    if (!currentColumns || currentColumns.length === 0) {
      console.log('‚ùå –ö–æ–ª–æ–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é')
      return NextResponse.json({
        success: false,
        error: '–ö–æ–ª–æ–Ω–∫–∏ sku, subcategory_id, specifications –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–µ products. –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL –≤ Supabase SQL Editor:',
        sql: `
-- –î–æ–±–∞–≤—å—Ç–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ products:

ALTER TABLE IF EXISTS products 
  ADD COLUMN IF NOT EXISTS sku TEXT,
  ADD COLUMN IF NOT EXISTS subcategory_id INTEGER,
  ADD COLUMN IF NOT EXISTS specifications JSONB NOT NULL DEFAULT '{}'::jsonb;
        `,
        instructions: `
1. –û—Ç–∫—Ä–æ–π—Ç–µ Supabase Console ‚Üí SQL Editor
2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ SQL –≤—ã—à–µ
3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL
4. –í–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
        `
      }, { status: 400 })
    }

    console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∏ products —Å—É—â–µ—Å—Ç–≤—É—é—Ç')

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
    console.log('üìù 4. –ü—Ä–æ–≤–µ—Ä—è—é –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ...')
    
    const { data: demoData, error: demoError } = await supabase
      .from('subcategories')
      .select(`
        id,
        name,
        slug,
        categories!inner(name)
      `)
      .limit(5)

    if (demoError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö:', demoError)
    } else {
      console.log('‚úÖ –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã:', demoData)
    }

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º API endpoints
    console.log('üìù 5. –ü—Ä–æ–≤–µ—Ä—è—é API endpoints...')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º /api/categories
    try {
      const categoriesResponse = await fetch(`${process.env.NEXT_PUBLIC_SUPABASE_URL}/rest/v1/categories?select=*&limit=1`, {
        headers: {
          'apikey': process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
          'Authorization': `Bearer ${process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY}`
        }
      })
      
      if (categoriesResponse.ok) {
        console.log('‚úÖ API categories —Ä–∞–±–æ—Ç–∞–µ—Ç')
      } else {
        console.log('‚ùå API categories –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', categoriesResponse.status)
      }
    } catch (e) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API categories:', e)
    }

    console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞!')

    return NextResponse.json({
      success: true,
      message: '–ú–∏–≥—Ä–∞—Ü–∏—è 001 –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!',
              verification: {
          columns: currentColumns,
          tables: currentTables,
          demoData: demoData,
          columnsError: columnsError,
          tablesError: tablesError,
          demoError: demoError
        }
    })

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
    return NextResponse.json({ 
      success: false, 
      error: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–∏–≥—Ä–∞—Ü–∏–∏',
      details: error
    }, { status: 500 })
  }
}
