const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

function loadEnv() {
  const envPath = path.join(process.cwd(), '.env.local');
  if (fs.existsSync(envPath)) {
    const envContent = fs.readFileSync(envPath, 'utf8');
    envContent.split('\n').forEach(line => {
      const [key, value] = line.split('=');
      if (key && value) {
        process.env[key.trim()] = value.trim();
      }
    });
  }
}
loadEnv();

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function directSQLCheck() {
  console.log('üîç –ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ SQL –∑–∞–ø—Ä–æ—Å–æ–≤...\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã subcategories
    console.log('üìã –ü—Ä–æ–≤–µ—Ä—è—é —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã subcategories...');
    const { data: tableCheck, error: tableError } = await supabase
      .rpc('exec_sql', { 
        sql: "SELECT schemaname, tablename FROM pg_tables WHERE tablename = 'subcategories'" 
      });
    
    if (tableError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã: ${tableError.message}`);
    } else {
      console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã:`, tableCheck);
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç–æ–π SELECT
    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä—è—é —á–µ—Ä–µ–∑ SELECT...');
    const { data: selectResult, error: selectError } = await supabase
      .rpc('exec_sql', { 
        sql: "SELECT COUNT(*) as count FROM subcategories" 
      });
    
    if (selectError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ SELECT: ${selectError.message}`);
    } else {
      console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç SELECT:`, selectResult);
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
    console.log('\nüèóÔ∏è –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã...');
    const { data: structureResult, error: structureError } = await supabase
      .rpc('exec_sql', { 
        sql: "SELECT column_name, data_type FROM information_schema.columns WHERE table_name = 'subcategories' ORDER BY ordinal_position" 
      });
    
    if (structureError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: ${structureError.message}`);
    } else {
      console.log(`‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã:`, structureResult);
    }

    // 4. –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –∑–∞–Ω–æ–≤–æ
    console.log('\nüîÑ –°–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—É –∑–∞–Ω–æ–≤–æ...');
    const createSQL = `
      DROP TABLE IF EXISTS public.subcategories CASCADE;
      CREATE TABLE public.subcategories (
        id SERIAL PRIMARY KEY,
        category_id INTEGER NOT NULL,
        name TEXT NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      );
      CREATE INDEX idx_subcategories_category_id ON public.subcategories(category_id);
      GRANT ALL ON public.subcategories TO anon, authenticated, service_role;
      GRANT USAGE, SELECT ON SEQUENCE public.subcategories_id_seq TO anon, authenticated, service_role;
    `;

    const { data: createResult, error: createError } = await supabase
      .rpc('exec_sql', { sql: createSQL });
    
    if (createError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: ${createError.message}`);
    } else {
      console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞:`, createResult);
    }

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è—é —Å–Ω–æ–≤–∞...');
    const { data: finalCheck, error: finalError } = await supabase
      .rpc('exec_sql', { 
        sql: "SELECT COUNT(*) as count FROM subcategories" 
      });
    
    if (finalError) {
      console.log(`‚ùå –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∞: ${finalError.message}`);
    } else {
      console.log(`‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞:`, finalCheck);
    }

    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ Supabase client
    console.log('\nüåê –ü—Ä–æ–≤–µ—Ä—è—é —á–µ—Ä–µ–∑ Supabase client...');
    const { data: clientCheck, error: clientError } = await supabase
      .from('subcategories')
      .select('*')
      .limit(1);
    
    if (clientError) {
      console.log(`‚ùå Supabase client –Ω–µ –≤–∏–¥–∏—Ç —Ç–∞–±–ª–∏—Ü—É: ${clientError.message}`);
    } else {
      console.log(`‚úÖ Supabase client –≤–∏–¥–∏—Ç —Ç–∞–±–ª–∏—Ü—É: ${clientCheck?.length || 0} –∑–∞–ø–∏—Å–µ–π`);
    }

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

directSQLCheck();
