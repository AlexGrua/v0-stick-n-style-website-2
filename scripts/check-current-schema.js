const fs = require('fs');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.local
const envPath = '.env.local';
const envContent = fs.readFileSync(envPath, 'utf8');
const envVars = {};
envContent.split('\n').forEach(line => {
  const [key, ...valueParts] = line.split('=');
  if (key && valueParts.length > 0) {
    envVars[key.trim()] = valueParts.join('=').trim();
  }
});

async function checkCurrentSchema() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    const baseUrl = 'http://localhost:3000'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç 3000
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã products
    console.log('üìù –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã products...');
    const productsStructureResponse = await fetch(`${baseUrl}/api/migrations/execute-sql`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        sql: `
          SELECT 
            column_name, 
            data_type, 
            is_nullable,
            column_default
          FROM information_schema.columns 
          WHERE table_name = 'products' 
          AND table_schema = 'public'
          ORDER BY ordinal_position;
        `
      })
    });
    
    if (productsStructureResponse.ok) {
      const productsStructure = await productsStructureResponse.json();
      console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã products:');
      console.log(productsStructure);
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã subcategories
    console.log('üìù –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã subcategories...');
    const subcategoriesResponse = await fetch(`${baseUrl}/api/migrations/execute-sql`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        sql: `
          SELECT 
            table_name,
            table_type
          FROM information_schema.tables 
          WHERE table_schema = 'public' 
          AND table_name IN ('subcategories', 'categories', 'products', 'suppliers')
          ORDER BY table_name;
        `
      })
    });
    
    if (subcategoriesResponse.ok) {
      const tables = await subcategoriesResponse.json();
      console.log('üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã:');
      console.log(tables);
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ products
    console.log('üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ products...');
    const productsDataResponse = await fetch(`${baseUrl}/api/migrations/execute-sql`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        sql: `
          SELECT 
            'Total products' as metric,
            count(*) as value
          FROM public.products
          UNION ALL
          SELECT 
            'Products with specifications' as metric,
            count(*) as value
          FROM public.products
          WHERE specifications is not null
          UNION ALL
          SELECT 
            'Sample specifications' as metric,
            count(*) as value
          FROM public.products
          WHERE specifications ? 'sku';
        `
      })
    });
    
    if (productsDataResponse.ok) {
      const productsData = await productsDataResponse.json();
      console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ products:');
      console.log(productsData);
    }
    
    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
  }
}

checkCurrentSchema();
