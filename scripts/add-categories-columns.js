const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.local
function loadEnv() {
  const envPath = path.join(__dirname, '..', '.env.local');
  if (fs.existsSync(envPath)) {
    const envContent = fs.readFileSync(envPath, 'utf8');
    envContent.split('\n').forEach(line => {
      const [key, value] = line.split('=');
      if (key && value) {
        process.env[key.trim()] = value.trim();
      }
    });
  }
}

loadEnv();

// –ò—Å–ø–æ–ª—å–∑—É–µ–º service role key –¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î
const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function addCategoriesColumns() {
  console.log('üîß –î–æ–±–∞–≤–ª—è—é –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É categories...');
  
  try {
    // SQL –º–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
    const sql = `
      BEGIN;

      ALTER TABLE public.categories
        ADD COLUMN IF NOT EXISTS is_active BOOLEAN NOT NULL DEFAULT true,
        ADD COLUMN IF NOT EXISTS sort_order INTEGER NOT NULL DEFAULT 0;

      -- –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
      CREATE INDEX IF NOT EXISTS idx_categories_sort_order ON public.categories(sort_order);

      COMMIT;

      -- –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à PostgREST
      NOTIFY pgrst, 'reload schema';
      SELECT pg_notify('pgrst','reload schema');
    `;

    console.log('üìù –í—ã–ø–æ–ª–Ω—è—é SQL –º–∏–≥—Ä–∞—Ü–∏—é...');

    // –í—ã–ø–æ–ª–Ω—è–µ–º —á–µ—Ä–µ–∑ –Ω–∞—à API
    const response = await fetch('http://localhost:3001/api/migrations/execute-sql', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ sql }),
    });

    const result = await response.json();
    
    if (result.success) {
      console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã!');
      console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:', result.results);
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫:', result);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
    console.log('\nüìù –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã...');
    const { data: columns, error: columnsError } = await supabase
      .from('information_schema.columns')
      .select('column_name, data_type, is_nullable, column_default')
      .eq('table_schema', 'public')
      .eq('table_name', 'categories')
      .in('column_name', ['is_active', 'sort_order'])
      .order('column_name');

    if (columnsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:', columnsError);
    } else {
      console.log('üìä –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:');
      columns.forEach(col => {
        console.log(`  ${col.column_name}: ${col.data_type} ${col.is_nullable === 'NO' ? 'NOT NULL' : 'NULL'} ${col.column_default ? `DEFAULT ${col.column_default}` : ''}`);
      });
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å—Ç–∞–≤–∫—É —Å –Ω–æ–≤—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
    console.log('\nüìù –¢–µ—Å—Ç–∏—Ä—É—é –≤—Å—Ç–∞–≤–∫—É —Å –Ω–æ–≤—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏...');
    const { data: testCategory, error: testError } = await supabase
      .from('categories')
      .insert({
        name: 'Test Category with Columns',
        slug: 'test-cols-' + Date.now(),
        is_active: true,
        sort_order: 10
      })
      .select()
      .single();

    if (testError) {
      console.error('‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª:', testError);
    } else {
      console.log('‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª! –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞:', testCategory);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–µ–º—É
    console.log('\nüìù –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ö–µ–º—É...');
    const { data: schemaCheck, error: schemaError } = await supabase
      .rpc('to_regclass', { class_name: 'public.categories' });

    if (schemaError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ö–µ–º—ã:', schemaError);
    } else {
      console.log('‚úÖ –°—Ö–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞:', schemaCheck);
    }

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

addCategoriesColumns();
