const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

function loadEnv() {
  const envPath = path.join(process.cwd(), '.env.local');
  if (fs.existsSync(envPath)) {
    const envContent = fs.readFileSync(envPath, 'utf8');
    envContent.split('\n').forEach(line => {
      const [key, value] = line.split('=');
      if (key && value) {
        process.env[key.trim()] = value.trim();
      }
    });
  }
}
loadEnv();

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function aggressivePostgrestReload() {
  console.log('üî• –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ PostgREST –∫–µ—à–∞...\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    console.log('üìã –ü—Ä–æ–≤–µ—Ä—è—é —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ...');
    const { data: products, error: productsError } = await supabase
      .from('products')
      .select('*')
      .limit(1);

    if (productsError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è products: ${productsError.message}`);
    } else {
      console.log(`‚úÖ Products –¥–æ—Å—Ç—É–ø–Ω—ã: ${products?.length || 0} –∑–∞–ø–∏—Å–µ–π`);
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º subcategories
    const { data: subcategories, error: subError } = await supabase
      .from('subcategories')
      .select('*')
      .limit(1);

    if (subError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è subcategories: ${subError.message}`);
    } else {
      console.log(`‚úÖ Subcategories –¥–æ—Å—Ç—É–ø–Ω—ã: ${subcategories?.length || 0} –∑–∞–ø–∏—Å–µ–π`);
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º suppliers.code
    const { data: suppliers, error: suppliersError } = await supabase
      .from('suppliers')
      .select('id, name, code')
      .limit(1);

    if (suppliersError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è suppliers.code: ${suppliersError.message}`);
    } else {
      console.log(`‚úÖ Suppliers.code –¥–æ—Å—Ç—É–ø–µ–Ω: ${suppliers?.length || 0} –∑–∞–ø–∏—Å–µ–π`);
    }

    // 4. –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ PostgREST
    console.log('\nüîÑ –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ PostgREST...');
    
    // –ú–µ—Ç–æ–¥ 1: NOTIFY
    console.log('üì¢ –ú–µ—Ç–æ–¥ 1: NOTIFY pgrst...');
    try {
      await supabase.rpc('exec_sql', { sql: `NOTIFY pgrst, 'reload schema';` });
      console.log('‚úÖ NOTIFY –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    } catch (e) {
      console.log(`‚ùå NOTIFY –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: ${e.message}`);
    }

    // –ú–µ—Ç–æ–¥ 2: pg_notify
    console.log('üì¢ –ú–µ—Ç–æ–¥ 2: pg_notify...');
    try {
      await supabase.rpc('exec_sql', { sql: `SELECT pg_notify('pgrst', 'reload schema');` });
      console.log('‚úÖ pg_notify –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    } catch (e) {
      console.log(`‚ùå pg_notify –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: ${e.message}`);
    }

    // –ú–µ—Ç–æ–¥ 3: pg_reload_conf
    console.log('üì¢ –ú–µ—Ç–æ–¥ 3: pg_reload_conf...');
    try {
      await supabase.rpc('exec_sql', { sql: `SELECT pg_reload_conf();` });
      console.log('‚úÖ pg_reload_conf –≤—ã–ø–æ–ª–Ω–µ–Ω');
    } catch (e) {
      console.log(`‚ùå pg_reload_conf –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: ${e.message}`);
    }

    // –ú–µ—Ç–æ–¥ 4: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã
    console.log('üì¢ –ú–µ—Ç–æ–¥ 4: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã...');
    try {
      await supabase.rpc('exec_sql', { sql: `
        DO $$
        BEGIN
          -- –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ö–µ–º–µ
          PERFORM pg_stat_clear_snapshot();
          PERFORM pg_stat_reset();
        END $$;
      ` });
      console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ö–µ–º—ã —Å–±—Ä–æ—à–µ–Ω–∞');
    } catch (e) {
      console.log(`‚ùå –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: ${e.message}`);
    }

    // 5. –ñ–¥–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞
    console.log('\n‚è≥ –ñ–¥—É 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π...');
    await new Promise(resolve => setTimeout(resolve, 15000));

    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏...');
    
    const { data: products2, error: productsError2 } = await supabase
      .from('products')
      .select('*')
      .limit(1);

    if (productsError2) {
      console.log(`‚ùå Products –≤—Å–µ –µ—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: ${productsError2.message}`);
    } else {
      console.log(`‚úÖ Products –¥–æ—Å—Ç—É–ø–Ω—ã: ${products2?.length || 0} –∑–∞–ø–∏—Å–µ–π`);
      if (products2 && products2.length > 0) {
        console.log(`üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏:`, Object.keys(products2[0]));
      }
    }

    const { data: subcategories2, error: subError2 } = await supabase
      .from('subcategories')
      .select('*')
      .limit(1);

    if (subError2) {
      console.log(`‚ùå Subcategories –≤—Å–µ –µ—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: ${subError2.message}`);
    } else {
      console.log(`‚úÖ Subcategories –¥–æ—Å—Ç—É–ø–Ω—ã: ${subcategories2?.length || 0} –∑–∞–ø–∏—Å–µ–π`);
    }

    const { data: suppliers2, error: suppliersError2 } = await supabase
      .from('suppliers')
      .select('id, name, code')
      .limit(1);

    if (suppliersError2) {
      console.log(`‚ùå Suppliers.code –≤—Å–µ –µ—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${suppliersError2.message}`);
    } else {
      console.log(`‚úÖ Suppliers.code –¥–æ—Å—Ç—É–ø–µ–Ω: ${suppliers2?.length || 0} –∑–∞–ø–∏—Å–µ–π`);
    }

    // 7. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä—É—é —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞...');
    try {
      const testProduct = {
        name: 'Test Product for Schema',
        slug: 'test-product-schema-' + Date.now(),
        category_id: 8, // PET Panel
        supplier_id: 1,
        sku: 'TEST-SKU-' + Date.now(),
        specifications: { test: true }
      };

      const { data: newProduct, error: createError } = await supabase
        .from('products')
        .insert(testProduct)
        .select()
        .single();

      if (createError) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: ${createError.message}`);
      } else {
        console.log(`‚úÖ –ü—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: ${newProduct.name} (SKU: ${newProduct.sku})`);
        
        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç
        await supabase.from('products').delete().eq('id', newProduct.id);
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç —É–¥–∞–ª–µ–Ω');
      }
    } catch (e) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${e.message}`);
    }

    console.log('\nüéâ –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

aggressivePostgrestReload();
