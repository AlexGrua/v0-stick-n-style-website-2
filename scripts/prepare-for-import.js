const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

function loadEnv() {
  const envPath = path.join(process.cwd(), '.env.local');
  if (fs.existsSync(envPath)) {
    const envContent = fs.readFileSync(envPath, 'utf8');
    envContent.split('\n').forEach(line => {
      const [key, value] = line.split('=');
      if (key && value) {
        process.env[key.trim()] = value.trim();
      }
    });
  }
}
loadEnv();

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function prepareForImport() {
  console.log('üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ö–µ–º—ã –∫ –∏–º–ø–æ—Ä—Ç—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤...\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    console.log('üìã –ü—Ä–æ–≤–µ—Ä—è—é —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...');
    
    const tables = ['products', 'categories', 'subcategories', 'suppliers'];
    for (const table of tables) {
      const { data, error } = await supabase
        .from(table)
        .select('id')
        .limit(1);
      
      if (error) {
        console.log(`‚ùå –¢–∞–±–ª–∏—Ü–∞ ${table} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${error.message}`);
      } else {
        console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${table} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      }
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É products
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã products...');
    
    const { data: products, error: productsError } = await supabase
      .from('products')
      .select('*')
      .limit(1);
    
    if (productsError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è products: ${productsError.message}`);
    } else if (products && products.length > 0) {
      const product = products[0];
      console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ products:');
      console.log(`   - id: ${typeof product.id}`);
      console.log(`   - sku: ${typeof product.sku}`);
      console.log(`   - category_id: ${typeof product.category_id}`);
      console.log(`   - subcategory_id: ${typeof product.subcategory_id}`);
      console.log(`   - supplier_id: ${typeof product.supplier_id}`);
      console.log(`   - specifications: ${typeof product.specifications}`);
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º FK —Å–≤—è–∑–∏
    console.log('\nüîó –ü—Ä–æ–≤–µ—Ä—è—é FK —Å–≤—è–∑–∏...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º categories
    const { data: categories, error: catError } = await supabase
      .from('categories')
      .select('id, name, slug')
      .limit(5);
    
    if (catError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è categories: ${catError.message}`);
    } else {
      console.log(`‚úÖ Categories: ${categories?.length || 0} –∑–∞–ø–∏—Å–µ–π`);
      categories?.forEach(cat => {
        console.log(`   - ${cat.name} (ID: ${cat.id}, slug: ${cat.slug})`);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º subcategories
    const { data: subcategories, error: subError } = await supabase
      .from('subcategories')
      .select('id, name, slug, category_id')
      .limit(5);
    
    if (subError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è subcategories: ${subError.message}`);
    } else {
      console.log(`‚úÖ Subcategories: ${subcategories?.length || 0} –∑–∞–ø–∏—Å–µ–π`);
      subcategories?.forEach(sub => {
        console.log(`   - ${sub.name} (ID: ${sub.id}, category_id: ${sub.category_id})`);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º suppliers
    const { data: suppliers, error: supError } = await supabase
      .from('suppliers')
      .select('id, name, code')
      .limit(5);
    
    if (supError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è suppliers: ${supError.message}`);
    } else {
      console.log(`‚úÖ Suppliers: ${suppliers?.length || 0} –∑–∞–ø–∏—Å–µ–π`);
      suppliers?.forEach(sup => {
        console.log(`   - ${sup.name} (ID: ${sup.id}, code: ${sup.code})`);
      });
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä—è—é –∏–Ω–¥–µ–∫—Å—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å SKU
    const { data: skuTest, error: skuError } = await supabase
      .from('products')
      .select('sku')
      .limit(10);
    
    if (skuError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SKU: ${skuError.message}`);
    } else {
      const skus = skuTest?.map(p => p.sku).filter(Boolean);
      const uniqueSkus = new Set(skus);
      console.log(`‚úÖ SKU —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å: ${skus?.length || 0} –∑–∞–ø–∏—Å–µ–π, ${uniqueSkus.size} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö`);
    }

    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä—É—é —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞...');
    
    if (categories && categories.length > 0 && suppliers && suppliers.length > 0) {
      const testProduct = {
        sku: `TEST-${Date.now()}`,
        name: 'Test Product for Import',
        description: 'Test product to verify schema',
        category_id: categories[0].id,
        supplier_id: suppliers[0].id,
        specifications: {
          status: 'inactive',
          test: true,
          technicalSpecifications: [],
          colorVariants: []
        }
      };

      const { data: createdProduct, error: createError } = await supabase
        .from('products')
        .insert(testProduct)
        .select()
        .single();

      if (createError) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞: ${createError.message}`);
      } else {
        console.log(`‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω: ${createdProduct.sku}`);
        
        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç
        const { error: deleteError } = await supabase
          .from('products')
          .delete()
          .eq('id', createdProduct.id);
        
        if (deleteError) {
          console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞: ${deleteError.message}`);
        } else {
          console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç —É–¥–∞–ª–µ–Ω');
        }
      }
    }

    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã
    console.log('\nüîÑ –ü—Ä–æ–≤–µ—Ä—è—é —Ç—Ä–∏–≥–≥–µ—Ä—ã...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–∏–≥–≥–µ—Ä—ã subcategories —Ä–∞–±–æ—Ç–∞—é—Ç
    if (categories && categories.length > 0) {
      const categoryId = categories[0].id;
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
      const { data: testSub, error: subCreateError } = await supabase
        .from('subcategories')
        .insert({
          category_id: categoryId,
          name: `Test Sub ${Date.now()}`,
          slug: `test-sub-${Date.now()}`
        })
        .select()
        .single();

      if (subCreateError) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${subCreateError.message}`);
      } else {
        console.log(`‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${testSub.name}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ subs –æ–±–Ω–æ–≤–∏–ª—Å—è
        const { data: updatedCategory, error: catUpdateError } = await supabase
          .from('categories')
          .select('id, name, subs')
          .eq('id', categoryId)
          .single();

        if (catUpdateError) {
          console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è subs: ${catUpdateError.message}`);
        } else {
          console.log(`‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${updatedCategory?.subs?.length || 0} –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
        }

        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
        const { error: subDeleteError } = await supabase
          .from('subcategories')
          .delete()
          .eq('id', testSub.id);

        if (subDeleteError) {
          console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${subDeleteError.message}`);
        } else {
          console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞');
        }
      }
    }

    console.log('\nüéâ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞:');
    console.log('   1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ INTEGER –¥–ª—è category_id, subcategory_id, supplier_id');
    console.log('   2. SKU –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º');
    console.log('   3. –í—Å–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ specifications JSONB');
    console.log('   4. –¢—Ä–∏–≥–≥–µ—Ä—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç categories.subs');
    console.log('   5. –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ FK –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

prepareForImport();
