const fs = require('fs');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.local
const envPath = '.env.local';
const envContent = fs.readFileSync(envPath, 'utf8');
const envVars = {};
envContent.split('\n').forEach(line => {
  const [key, ...valueParts] = line.split('=');
  if (key && valueParts.length > 0) {
    envVars[key.trim()] = valueParts.join('=').trim();
  }
});

async function verifyAfterDuplicateFix() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...');
    
    const baseUrl = 'http://localhost:3000';
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã SKU
    console.log('üìù –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã SKU...');
    const duplicatesResponse = await fetch(`${baseUrl}/api/migrations/execute-sql`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        sql: `
          SELECT 
            sku, 
            count(*) as duplicates
          FROM public.products
          WHERE sku IS NOT NULL AND sku <> ''
          GROUP BY sku
          HAVING count(*) > 1
          ORDER BY count(*) DESC;
        `
      })
    });
    
    if (duplicatesResponse.ok) {
      const duplicates = await duplicatesResponse.json();
      console.log('üìã –î—É–±–ª–∏–∫–∞—Ç—ã SKU:', duplicates);
      
      if (duplicates.data && duplicates.data.length === 0) {
        console.log('‚úÖ –î—É–±–ª–∏–∫–∞—Ç—ã SKU —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã!');
      } else {
        console.log('‚ùå –î—É–±–ª–∏–∫–∞—Ç—ã SKU –≤—Å–µ –µ—â–µ –µ—Å—Ç—å:', duplicates.data);
      }
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å
    console.log('üìù –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å SKU...');
    const indexResponse = await fetch(`${baseUrl}/api/migrations/execute-sql`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        sql: `
          SELECT 
            indexname,
            indexdef
          FROM pg_indexes 
          WHERE tablename = 'products' 
          AND indexname LIKE '%sku%';
        `
      })
    });
    
    if (indexResponse.ok) {
      const indexes = await indexResponse.json();
      console.log('üìã –ò–Ω–¥–µ–∫—Å—ã SKU:', indexes);
      
      if (indexes.data && indexes.data.length > 0) {
        console.log('‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å SKU —Å–æ–∑–¥–∞–Ω!');
      } else {
        console.log('‚ùå –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å SKU –ù–ï —Å–æ–∑–¥–∞–Ω!');
      }
    }
    
    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞...');
    const createResponse = await fetch(`${baseUrl}/api/products`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        name: 'Test Product After Fix',
        description: 'Test Description',
        category_id: 1,
        sku: 'TEST_AFTER_FIX_001',
        price: 100,
        in_stock: true
      })
    });
    
    if (createResponse.ok) {
      const createResult = await createResponse.json();
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
      console.log('üìã –°–æ–∑–¥–∞–Ω –ø—Ä–æ–¥—É–∫—Ç:', {
        id: createResult.id,
        name: createResult.name,
        sku: createResult.sku
      });
    } else {
      const errorText = await createResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞:', errorText);
    }
    
    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –¥—É–±–ª–∏—Ä—É—é—â–∏–º—Å—è SKU
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –¥—É–±–ª–∏—Ä—É—é—â–∏–º—Å—è SKU...');
    const duplicateResponse = await fetch(`${baseUrl}/api/products`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        name: 'Test Product Duplicate SKU',
        description: 'Test Description',
        category_id: 1,
        sku: 'TEST_AFTER_FIX_001', // –¢–æ—Ç –∂–µ SKU
        price: 100,
        in_stock: true
      })
    });
    
    if (duplicateResponse.ok) {
      console.log('‚ùå –î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è SKU –±—ã–ª —Å–æ–∑–¥–∞–Ω - –∏–Ω–¥–µ–∫—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    } else {
      console.log('‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è SKU –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω - –∏–Ω–¥–µ–∫—Å —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    }
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...');
    const statsResponse = await fetch(`${baseUrl}/api/migrations/execute-sql`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        sql: `
          SELECT 
            'Total products' as metric,
            count(*) as value
          FROM public.products
          UNION ALL
          SELECT 
            'Products with SKU' as metric,
            count(*) as value
          FROM public.products
          WHERE sku IS NOT NULL AND sku <> ''
          UNION ALL
          SELECT 
            'Unique SKUs' as metric,
            count(DISTINCT sku) as value
          FROM public.products
          WHERE sku IS NOT NULL AND sku <> '';
        `
      })
    });
    
    if (statsResponse.ok) {
      const stats = await statsResponse.json();
      console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', stats);
    }
    
    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
  }
}

verifyAfterDuplicateFix();
