const { exec } = require('child_process');
const fs = require('fs');
const path = require('path');

async function executeSQL() {
  console.log('üöÄ –í—ã–ø–æ–ª–Ω—è—é –º–∏–≥—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ Supabase CLI...');
  
  const sqlFile = path.join(__dirname, 'execute-migration-full.sql');
  const sqlContent = fs.readFileSync(sqlFile, 'utf8');
  
  console.log('üìù SQL —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:');
  console.log('='.repeat(50));
  console.log(sqlContent);
  console.log('='.repeat(50));
  
  // –í—ã–ø–æ–ª–Ω—è–µ–º SQL —á–µ—Ä–µ–∑ Supabase CLI
  const command = `supabase db reset --linked`;
  
  console.log('üîß –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É:', command);
  
  return new Promise((resolve, reject) => {
    exec(command, { cwd: process.cwd() }, (error, stdout, stderr) => {
      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', error);
        console.error('stderr:', stderr);
        reject(error);
        return;
      }
      
      console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:');
      console.log(stdout);
      resolve(stdout);
    });
  });
}

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - —á–µ—Ä–µ–∑ psql
async function executeSQLViaPsql() {
  console.log('üöÄ –í—ã–ø–æ–ª–Ω—è—é –º–∏–≥—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ psql...');
  
  const sqlFile = path.join(__dirname, 'execute-migration-full.sql');
  
  // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
  const serviceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
  
  if (!supabaseUrl || !serviceKey) {
    console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è SUPABASE_URL –∏–ª–∏ SERVICE_ROLE_KEY');
    return;
  }
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º host –∏ port –∏–∑ URL
  const url = new URL(supabaseUrl);
  const host = url.hostname;
  const port = url.port || 5432;
  const database = 'postgres';
  
  const command = `psql "postgresql://postgres:${serviceKey}@${host}:${port}/${database}" -f "${sqlFile}"`;
  
  console.log('üîß –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É psql...');
  
  return new Promise((resolve, reject) => {
    exec(command, { cwd: process.cwd() }, (error, stdout, stderr) => {
      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è psql:', error);
        console.error('stderr:', stderr);
        reject(error);
        return;
      }
      
      console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è psql:');
      console.log(stdout);
      resolve(stdout);
    });
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    console.log('üéØ –ù–∞—á–∏–Ω–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏...');
    
    // –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ Supabase CLI
    try {
      await executeSQL();
      console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ Supabase CLI');
    } catch (error) {
      console.log('‚ö†Ô∏è Supabase CLI –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ psql...');
      
      // –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ psql
      try {
        await executeSQLViaPsql();
        console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ psql');
      } catch (psqlError) {
        console.error('‚ùå –û–±–∞ —Å–ø–æ—Å–æ–±–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏');
        console.error('üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:');
        console.error('1. –û—Ç–∫—Ä–æ–π—Ç–µ Supabase Console ‚Üí SQL Editor');
        console.error('2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ scripts/execute-migration-full.sql');
        console.error('3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL');
        console.error('4. –í–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞ –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç');
      }
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

main();
