const { createClient } = require('@supabase/supabase-js')
const fs = require('fs')
const path = require('path')

function loadEnv() {
  const envPath = path.join(__dirname, '..', '.env.local')
  if (fs.existsSync(envPath)) {
    const envContent = fs.readFileSync(envPath, 'utf8')
    envContent.split('\n').forEach(line => {
      const [key, value] = line.split('=')
      if (key && value) {
        process.env[key.trim()] = value.trim()
      }
    })
  }
}

loadEnv()

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è SUPABASE_URL –∏–ª–∏ SUPABASE_SERVICE_ROLE_KEY')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function fixSupplierStatuses() {
  try {
    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤...\n')

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã
    const { data: suppliers, error: fetchError } = await supabase
      .from('suppliers')
      .select('id, name, status')
      .order('id')

    if (fetchError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤:', fetchError)
      return
    }

    console.log('üìä –¢–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤:')
    suppliers.forEach(s => {
      console.log(`   ID ${s.id}: ${s.name} - ${s.status || 'NULL'}`)
    })

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
    const { data: updateResult, error: updateError } = await supabase
      .from('suppliers')
      .update({ status: 'active' })
      .in('status', ['approved', 'pending', 'blocked'])
      .select('id, name, status')

    if (updateError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤:', updateError)
      return
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º NULL —Å—Ç–∞—Ç—É—Å—ã
    const { data: nullUpdateResult, error: nullUpdateError } = await supabase
      .from('suppliers')
      .update({ status: 'active' })
      .is('status', null)
      .select('id, name, status')

    if (nullUpdateError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è NULL —Å—Ç–∞—Ç—É—Å–æ–≤:', nullUpdateError)
      return
    }

    console.log('\n‚úÖ –°—Ç–∞—Ç—É—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!')
    console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${(updateResult?.length || 0) + (nullUpdateResult?.length || 0)}`)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const { data: finalSuppliers, error: finalError } = await supabase
      .from('suppliers')
      .select('id, name, status')
      .order('id')

    if (finalError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', finalError)
      return
    }

    console.log('\nüìä –§–∏–Ω–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤:')
    finalSuppliers.forEach(s => {
      console.log(`   ID ${s.id}: ${s.name} - ${s.status}`)
    })

    // –£–≤–µ–¥–æ–º–ª—è–µ–º PostgREST
    const { error: notifyError } = await supabase.rpc('notify_pgrst_reload_schema')
    if (notifyError) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å PostgREST (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)')
    } else {
      console.log('‚úÖ PostgREST —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö')
    }

    console.log('\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!')

  } catch (error) {
    console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error)
  }
}

fixSupplierStatuses()
