const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.local
function loadEnv() {
  const envPath = path.join(__dirname, '..', '.env.local');
  if (fs.existsSync(envPath)) {
    const envContent = fs.readFileSync(envPath, 'utf8');
    envContent.split('\n').forEach(line => {
      const [key, value] = line.split('=');
      if (key && value) {
        process.env[key.trim()] = value.trim();
      }
    });
  }
}

loadEnv();

// –ò—Å–ø–æ–ª—å–∑—É–µ–º service role key –¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î
const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function testDbInsert() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É—é –≤—Å—Ç–∞–≤–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –ë–î...');
  console.log('üîó URL:', process.env.NEXT_PUBLIC_SUPABASE_URL);
  console.log('üîë Service Role Key:', process.env.SUPABASE_SERVICE_ROLE_KEY ? '–ï—Å—Ç—å' : '–ù–ï–¢!');
  
  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–∞—è –≤—Å—Ç–∞–≤–∫–∞
    console.log('üìù –¢–µ—Å—Ç 1: –í—Å—Ç–∞–≤–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...');
    const { data, error } = await supabase
      .from('categories')
      .insert({ 
        name: 'Test Category', 
        slug: 'test-category-' + Date.now() 
      })
      .select()
      .single();

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏:', error);
      return;
    }

    console.log('‚úÖ –í—Å—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞:', data);

    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
    console.log('\nüìù –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã...');
    const { data: columns, error: columnsError } = await supabase
      .from('information_schema.columns')
      .select('column_name, data_type, is_nullable, column_default')
      .eq('table_name', 'categories')
      .order('ordinal_position');

    if (columnsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:', columnsError);
    } else {
      console.log('üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã categories:');
      columns.forEach(col => {
        console.log(`  ${col.column_name}: ${col.data_type} ${col.is_nullable === 'NO' ? 'NOT NULL' : 'NULL'} ${col.column_default ? `DEFAULT ${col.column_default}` : ''}`);
      });
    }

    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º RLS
    console.log('\nüìù –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º RLS...');
    const { data: rlsStatus, error: rlsError } = await supabase
      .from('pg_tables')
      .select('rowsecurity')
      .eq('tablename', 'categories')
      .single();

    if (rlsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ RLS:', rlsError);
    } else {
      console.log(`üîí RLS —Å—Ç–∞—Ç—É—Å: ${rlsStatus.rowsecurity ? '–í–ö–õ–Æ–ß–ï–ù' : '–û–¢–ö–õ–Æ–ß–ï–ù'}`);
    }

    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    console.log('\nüìù –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...');
    const { data: existing, error: existingError } = await supabase
      .from('categories')
      .select('*')
      .limit(5);

    if (existingError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', existingError);
    } else {
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${existing.length}`);
      existing.forEach(cat => {
        console.log(`  - ${cat.name} (${cat.slug})`);
      });
    }

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

testDbInsert();
