const { createClient } = require('@supabase/supabase-js')
const fs = require('fs')
const path = require('path')

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.local
const envPath = path.join(process.cwd(), '.env.local')
if (fs.existsSync(envPath)) {
  const envContent = fs.readFileSync(envPath, 'utf8')
  envContent.split('\n').forEach(line => {
    const [key, ...valueParts] = line.split('=')
    if (key && valueParts.length > 0) {
      const value = valueParts.join('=').trim()
      if (!process.env[key.trim()]) {
        process.env[key.trim()] = value
      }
    }
  })
}

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.log('‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è SUPABASE_URL –∏–ª–∏ SUPABASE_SERVICE_ROLE_KEY')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function fixContactBlocks() {
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è—é –±–ª–æ–∫–∏ Contact...')
  
  try {
    // 1. –ù–∞–π–¥–µ–º ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã contact
    const { data: page, error: pageError } = await supabase
      .from('pages')
      .select('id')
      .eq('key', 'contact')
      .single()
    
    if (pageError || !page) {
      console.log('‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ contact –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
      return
    }
    
    console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ contact, ID:', page.id)
    
    // 2. –í–∫–ª—é—á–∏–º –±–ª–æ–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const { error: updateError } = await supabase
      .from('page_blocks')
      .update({ is_active: true })
      .eq('page_id', page.id)
      .in('type', ['contactsHero', 'contactFormBlock', 'contactChannels'])
    
    if (updateError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è is_active:', updateError)
    } else {
      console.log('‚úÖ –ë–ª–æ–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã')
    }
    
    // 3. –ü–æ–ª—É—á–∏–º –≤—Å–µ –±–ª–æ–∫–∏ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–∑–∏—Ü–∏–π
    const { data: blocks, error: blocksError } = await supabase
      .from('page_blocks')
      .select('id, position')
      .eq('page_id', page.id)
      .order('position', { ascending: true })
    
    if (blocksError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–ª–æ–∫–æ–≤:', blocksError)
      return
    }
    
    console.log('üì¶ –ù–∞–π–¥–µ–Ω–æ –±–ª–æ–∫–æ–≤:', blocks.length)
    
    // 4. –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ–∑–∏—Ü–∏–∏: 0, 10, 20...
    for (let i = 0; i < blocks.length; i++) {
      const newPosition = i * 10
      const { error: posError } = await supabase
        .from('page_blocks')
        .update({ position: newPosition })
        .eq('id', blocks[i].id)
      
      if (posError) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –±–ª–æ–∫–∞ ${blocks[i].id}:`, posError)
      } else {
        console.log(`‚úÖ –ü–æ–∑–∏—Ü–∏—è –±–ª–æ–∫–∞ ${blocks[i].id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${blocks[i].position} ‚Üí ${newPosition}`)
      }
    }
    
    // 5. –ü—Ä–æ–≤–µ—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const { data: finalBlocks, error: finalError } = await supabase
      .from('page_blocks')
      .select('type, position, is_active, props')
      .eq('page_id', page.id)
      .order('position', { ascending: true })
    
    if (finalError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', finalError)
    } else {
      console.log('‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:')
      finalBlocks.forEach(block => {
        console.log(`  - ${block.type}: position=${block.position}, active=${block.is_active}`)
      })
    }
    
    console.log('üéâ –ë–ª–æ–∫–∏ Contact –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!')
    
  } catch (error) {
    console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
  }
}

fixContactBlocks()

