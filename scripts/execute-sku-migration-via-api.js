const fs = require('fs');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.local
const envPath = '.env.local';
const envContent = fs.readFileSync(envPath, 'utf8');
const envVars = {};
envContent.split('\n').forEach(line => {
  const [key, ...valueParts] = line.split('=');
  if (key && valueParts.length > 0) {
    envVars[key.trim()] = valueParts.join('=').trim();
  }
});

async function executeMigration() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é SKU —á–µ—Ä–µ–∑ API...');
    
    const baseUrl = 'http://localhost:3001'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç 3001
    
    // 1. –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ API endpoint
    console.log('üìù –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é SKU...');
    const migrationSql = fs.readFileSync('scripts/fix-sku-migration.sql', 'utf8');
    
    const response = await fetch(`${baseUrl}/api/migrations/execute-sql`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        sql: migrationSql
      })
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', errorText);
      return;
    }
    
    const result = await response.json();
    console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:', result);
    
    // 2. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–µ—à PostgREST
    console.log('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–µ—à PostgREST...');
    const reloadResponse = await fetch(`${baseUrl}/api/migrations/execute-sql`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        sql: "NOTIFY pgrst, 'reload schema';"
      })
    });
    
    if (reloadResponse.ok) {
      console.log('‚úÖ –ö–µ—à PostgREST –æ–±–Ω–æ–≤–ª–µ–Ω!');
    }
    
    console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

executeMigration();
