const fs = require('fs');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.local
const envPath = '.env.local';
const envContent = fs.readFileSync(envPath, 'utf8');
const envVars = {};
envContent.split('\n').forEach(line => {
  const [key, ...valueParts] = line.split('=');
  if (key && valueParts.length > 0) {
    envVars[key.trim()] = valueParts.join('=').trim();
  }
});

async function verifyMigrationComplete() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏...');
    
    const baseUrl = 'http://localhost:3000';
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã products
    console.log('üìù –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫—É sku –≤ products...');
    const skuCheckResponse = await fetch(`${baseUrl}/api/migrations/execute-sql`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        sql: `
          SELECT 
            column_name, 
            data_type, 
            is_nullable
          FROM information_schema.columns 
          WHERE table_name = 'products' 
          AND table_schema = 'public'
          AND column_name = 'sku';
        `
      })
    });
    
    if (skuCheckResponse.ok) {
      const skuCheck = await skuCheckResponse.json();
      console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–æ–Ω–∫–∏ sku:', skuCheck);
      
      if (skuCheck.data && skuCheck.data.length > 0) {
        console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ sku –Ω–∞–π–¥–µ–Ω–∞!');
      } else {
        console.log('‚ùå –ö–æ–ª–æ–Ω–∫–∞ sku –ù–ï –Ω–∞–π–¥–µ–Ω–∞!');
      }
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É subcategories
    console.log('üìù –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É subcategories...');
    const subcategoriesCheckResponse = await fetch(`${baseUrl}/api/migrations/execute-sql`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        sql: `
          SELECT 
            table_name,
            table_type
          FROM information_schema.tables 
          WHERE table_schema = 'public' 
          AND table_name = 'subcategories';
        `
      })
    });
    
    if (subcategoriesCheckResponse.ok) {
      const subcategoriesCheck = await subcategoriesCheckResponse.json();
      console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã subcategories:', subcategoriesCheck);
      
      if (subcategoriesCheck.data && subcategoriesCheck.data.length > 0) {
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ subcategories –Ω–∞–π–¥–µ–Ω–∞!');
      } else {
        console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ subcategories –ù–ï –Ω–∞–π–¥–µ–Ω–∞!');
      }
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
    console.log('üìù –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã...');
    const indexesCheckResponse = await fetch(`${baseUrl}/api/migrations/execute-sql`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        sql: `
          SELECT 
            indexname,
            indexdef
          FROM pg_indexes 
          WHERE tablename = 'products' 
          AND indexname LIKE '%sku%';
        `
      })
    });
    
    if (indexesCheckResponse.ok) {
      const indexesCheck = await indexesCheckResponse.json();
      console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤ SKU:', indexesCheck);
      
      if (indexesCheck.data && indexesCheck.data.length > 0) {
        console.log('‚úÖ –ò–Ω–¥–µ–∫—Å SKU –Ω–∞–π–¥–µ–Ω!');
      } else {
        console.log('‚ùå –ò–Ω–¥–µ–∫—Å SKU –ù–ï –Ω–∞–π–¥–µ–Ω!');
      }
    }
    
    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º API
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º API...');
    
    // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
    const createProductResponse = await fetch(`${baseUrl}/api/products`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        name: 'Test Product Migration',
        description: 'Test Description',
        category_id: 1,
        sku: 'TEST_MIGRATION_001',
        price: 100,
        in_stock: true
      })
    });
    
    if (createProductResponse.ok) {
      const createResult = await createProductResponse.json();
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
      console.log('üìã –°–æ–∑–¥–∞–Ω –ø—Ä–æ–¥—É–∫—Ç:', {
        id: createResult.id,
        name: createResult.name,
        sku: createResult.sku
      });
    } else {
      const errorText = await createProductResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞:', errorText);
    }
    
    // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    const getProductsResponse = await fetch(`${baseUrl}/api/products?limit=5`);
    if (getProductsResponse.ok) {
      const productsResult = await getProductsResponse.json();
      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
      console.log('üìä –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', productsResult.total);
    } else {
      const errorText = await getProductsResponse.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', errorText);
    }
    
    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
  }
}

verifyMigrationComplete();
