const { createClient } = require('@supabase/supabase-js')

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Missing Supabase credentials')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function diagnoseCategories() {
  console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏...\n')

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ª–µ–∂–∏—Ç –≤ categories.subs
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ categories.subs:')
    const { data: categoriesWithSubs, error: subsError } = await supabase
      .from('categories')
      .select('id, name, subs')
      .not('subs', 'is', null)
      .neq('subs', '[]')

    if (subsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ categories.subs:', subsError)
    } else {
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${categoriesWithSubs?.length || 0} –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ subs:`)
      categoriesWithSubs?.forEach(cat => {
        console.log(`   ID ${cat.id}: "${cat.name}" ‚Üí subs: ${JSON.stringify(cat.subs)}`)
      })
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã subcategories:')
    const { data: subcategories, error: subError } = await supabase
      .from('subcategories')
      .select('id, name, category_id')
      .order('category_id, id')

    if (subError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ subcategories:', subError)
    } else {
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${subcategories?.length || 0} –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π:`)
      subcategories?.forEach(sub => {
        console.log(`   ID ${sub.id}: "${sub.name}" ‚Üí category_id: ${sub.category_id}`)
      })
    }

    // 3. –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    console.log('\n3Ô∏è‚É£ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:')
    const { data: categories, error: catError } = await supabase
      .from('categories')
      .select('id, name, subs')

    if (catError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ categories:', catError)
      return
    }

    categories?.forEach(cat => {
      const realSubs = subcategories?.filter(sub => sub.category_id === cat.id) || []
      const subsFromColumn = cat.subs || []
      
      console.log(`\nüìã –ö–∞—Ç–µ–≥–æ—Ä–∏—è "${cat.name}" (ID: ${cat.id}):`)
      console.log(`   –í –∫–æ–ª–æ–Ω–∫–µ subs: ${JSON.stringify(subsFromColumn)}`)
      console.log(`   –í —Ç–∞–±–ª–∏—Ü–µ subcategories: ${JSON.stringify(realSubs.map(s => ({ id: s.id, name: s.name })))}`)
      
      if (JSON.stringify(subsFromColumn) !== JSON.stringify(realSubs.map(s => ({ id: s.id, name: s.name })))) {
        console.log(`   ‚ö†Ô∏è  –†–ê–°–•–û–ñ–î–ï–ù–ò–ï!`)
      } else {
        console.log(`   ‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç`)
      }
    })

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º FK constraints
    console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º FK constraints:')
    const { data: constraints, error: constError } = await supabase
      .rpc('get_foreign_key_constraints', { table_name: 'subcategories' })

    if (constError) {
      console.log('   ‚ÑπÔ∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ FK (–≤–æ–∑–º–æ–∂–Ω–æ, —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)')
    } else {
      console.log('   FK constraints:', constraints)
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ:', error)
  }
}

diagnoseCategories()
