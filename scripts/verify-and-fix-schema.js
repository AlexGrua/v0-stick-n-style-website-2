const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

function loadEnv() {
  const envPath = path.join(process.cwd(), '.env.local');
  if (fs.existsSync(envPath)) {
    const envContent = fs.readFileSync(envPath, 'utf8');
    envContent.split('\n').forEach(line => {
      const [key, value] = line.split('=');
      if (key && value) {
        process.env[key.trim()] = value.trim();
      }
    });
  }
}
loadEnv();

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function verifyAndFixSchema() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã...\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É products
    console.log('üìã –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã products...');
    const { data: products, error: productsError } = await supabase
      .from('products')
      .select('*')
      .limit(1);

    if (productsError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è products: ${productsError.message}`);
      return;
    }

    let hasSku = false;
    let hasSubcategoryId = false;
    let hasSupplierId = false;
    let hasSpecifications = false;
    
    if (products && products.length > 0) {
      console.log('üìã –¢–µ–∫—É—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ products:', Object.keys(products[0]));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
      hasSku = 'sku' in products[0];
      hasSubcategoryId = 'subcategory_id' in products[0];
      hasSupplierId = 'supplier_id' in products[0];
      hasSpecifications = 'specifications' in products[0];
      
      console.log(`‚úÖ sku: ${hasSku ? '–ï–°–¢–¨' : '–û–¢–°–£–¢–°–¢–í–£–ï–¢'}`);
      console.log(`‚úÖ subcategory_id: ${hasSubcategoryId ? '–ï–°–¢–¨' : '–û–¢–°–£–¢–°–¢–í–£–ï–¢'}`);
      console.log(`‚úÖ supplier_id: ${hasSupplierId ? '–ï–°–¢–¨' : '–û–¢–°–£–¢–°–¢–í–£–ï–¢'}`);
      console.log(`‚úÖ specifications: ${hasSpecifications ? '–ï–°–¢–¨' : '–û–¢–°–£–¢–°–¢–í–£–ï–¢'}`);
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º subcategories —Ç–∞–±–ª–∏—Ü—É
    console.log('\nüìã –ü—Ä–æ–≤–µ—Ä—è—é —Ç–∞–±–ª–∏—Ü—É subcategories...');
    const { data: subcategories, error: subError } = await supabase
      .from('subcategories')
      .select('*')
      .limit(1);

    if (subError) {
      console.log(`‚ùå –¢–∞–±–ª–∏—Ü–∞ subcategories –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${subError.message}`);
    } else {
      console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ subcategories —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${subcategories?.length || 0} –∑–∞–ø–∏—Å–µ–π`);
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º suppliers.code
    console.log('\nüìã –ü—Ä–æ–≤–µ—Ä—è—é suppliers.code...');
    const { data: suppliers, error: suppliersError } = await supabase
      .from('suppliers')
      .select('*')
      .limit(1);

    if (suppliersError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è suppliers: ${suppliersError.message}`);
    } else if (suppliers && suppliers.length > 0) {
      console.log('üìã –¢–µ–∫—É—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ suppliers:', Object.keys(suppliers[0]));
      const hasCode = 'code' in suppliers[0];
      console.log(`‚úÖ code: ${hasCode ? '–ï–°–¢–¨' : '–û–¢–°–£–¢–°–¢–í–£–ï–¢'}`);
    }

    // 4. –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    console.log('\nüîß –ü—Ä–∏–º–µ–Ω—è—é –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ö–µ–º—ã...');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –≤ products –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if (!hasSku) {
      console.log('üìù –î–æ–±–∞–≤–ª—è—é –∫–æ–ª–æ–Ω–∫—É sku –≤ products...');
      try {
        await supabase.rpc('exec_sql', { sql: `
          ALTER TABLE public.products 
          ADD COLUMN IF NOT EXISTS sku TEXT UNIQUE;
        ` });
        console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ sku –¥–æ–±–∞–≤–ª–µ–Ω–∞');
      } catch (e) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è sku: ${e.message}`);
      }
    }

    if (!hasSubcategoryId) {
      console.log('üìù –î–æ–±–∞–≤–ª—è—é –∫–æ–ª–æ–Ω–∫—É subcategory_id –≤ products...');
      try {
        await supabase.rpc('exec_sql', { sql: `
          ALTER TABLE public.products 
          ADD COLUMN IF NOT EXISTS subcategory_id INTEGER REFERENCES public.subcategories(id);
        ` });
        console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ subcategory_id –¥–æ–±–∞–≤–ª–µ–Ω–∞');
      } catch (e) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è subcategory_id: ${e.message}`);
      }
    }

    if (!hasSupplierId) {
      console.log('üìù –î–æ–±–∞–≤–ª—è—é –∫–æ–ª–æ–Ω–∫—É supplier_id –≤ products...');
      try {
        await supabase.rpc('exec_sql', { sql: `
          ALTER TABLE public.products 
          ADD COLUMN IF NOT EXISTS supplier_id INTEGER REFERENCES public.suppliers(id);
        ` });
        console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ supplier_id –¥–æ–±–∞–≤–ª–µ–Ω–∞');
      } catch (e) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è supplier_id: ${e.message}`);
      }
    }

    if (!hasSpecifications) {
      console.log('üìù –î–æ–±–∞–≤–ª—è—é –∫–æ–ª–æ–Ω–∫—É specifications –≤ products...');
      try {
        await supabase.rpc('exec_sql', { sql: `
          ALTER TABLE public.products 
          ADD COLUMN IF NOT EXISTS specifications JSONB DEFAULT '{}'::jsonb;
        ` });
        console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ specifications –¥–æ–±–∞–≤–ª–µ–Ω–∞');
      } catch (e) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è specifications: ${e.message}`);
      }
    }

    // –°–æ–∑–¥–∞–µ–º subcategories —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (subError) {
      console.log('üìù –°–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—É subcategories...');
      try {
        await supabase.rpc('exec_sql', { sql: `
          CREATE TABLE IF NOT EXISTS public.subcategories (
            id SERIAL PRIMARY KEY,
            category_id INTEGER NOT NULL REFERENCES public.categories(id) ON DELETE CASCADE,
            name TEXT NOT NULL,
            slug TEXT UNIQUE NOT NULL,
            description TEXT,
            image_url TEXT,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
          );
        ` });
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ subcategories —Å–æ–∑–¥–∞–Ω–∞');
      } catch (e) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è subcategories: ${e.message}`);
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º code –≤ suppliers –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    const { data: suppliers2, error: suppliersError2 } = await supabase
      .from('suppliers')
      .select('*')
      .limit(1);

    if (!suppliersError2 && suppliers2 && suppliers2.length > 0 && !('code' in suppliers2[0])) {
      console.log('üìù –î–æ–±–∞–≤–ª—è—é –∫–æ–ª–æ–Ω–∫—É code –≤ suppliers...');
      try {
        await supabase.rpc('exec_sql', { sql: `
          ALTER TABLE public.suppliers 
          ADD COLUMN IF NOT EXISTS code TEXT UNIQUE;
        ` });
        console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ code –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ suppliers');
      } catch (e) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è code: ${e.message}`);
      }
    }

    // 5. –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
    console.log('\nüìä –°–æ–∑–¥–∞—é –∏–Ω–¥–µ–∫—Å—ã...');
    try {
      await supabase.rpc('exec_sql', { sql: `
        CREATE INDEX IF NOT EXISTS idx_products_sku ON public.products(sku);
        CREATE INDEX IF NOT EXISTS idx_products_category_id ON public.products(category_id);
        CREATE INDEX IF NOT EXISTS idx_products_subcategory_id ON public.products(subcategory_id);
        CREATE INDEX IF NOT EXISTS idx_products_supplier_id ON public.products(supplier_id);
        CREATE INDEX IF NOT EXISTS idx_subcategories_category_id ON public.subcategories(category_id);
        CREATE INDEX IF NOT EXISTS idx_suppliers_code ON public.suppliers(code);
      ` });
      console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã');
    } catch (e) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤: ${e.message}`);
    }

    // 6. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º PostgREST
    console.log('\nüîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é PostgREST...');
    try {
      await supabase.rpc('exec_sql', { sql: `NOTIFY pgrst, 'reload schema';` });
      await supabase.rpc('exec_sql', { sql: `SELECT pg_notify('pgrst', 'reload schema');` });
      console.log('‚úÖ PostgREST –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω');
    } catch (e) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ PostgREST: ${e.message}`);
    }

    // 7. –ñ–¥–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\n‚è≥ –ñ–¥—É 10 —Å–µ–∫—É–Ω–¥...');
    await new Promise(resolve => setTimeout(resolve, 10000));

    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç...');
    const { data: productsFinal, error: productsFinalError } = await supabase
      .from('products')
      .select('*')
      .limit(1);

    if (productsFinalError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ products: ${productsFinalError.message}`);
    } else if (productsFinal && productsFinal.length > 0) {
      console.log('üìã –§–∏–Ω–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ products:', Object.keys(productsFinal[0]));
    }

    console.log('\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

verifyAndFixSchema();
