const http = require('http');

async function checkMigrationResult() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏...');
  
  const data = JSON.stringify({});
  
  const options = {
    hostname: 'localhost',
    port: 3001,
    path: '/api/migrations/execute',
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Content-Length': data.length
    }
  };

  return new Promise((resolve, reject) => {
    const req = http.request(options, (res) => {
      let responseData = '';
      
      res.on('data', (chunk) => {
        responseData += chunk;
      });
      
      res.on('end', () => {
        try {
          const result = JSON.parse(responseData);
          console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:');
          console.log(JSON.stringify(result, null, 2));
          
          if (result.success) {
            console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
            console.log('üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
            console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ –∞–¥–º–∏–Ω–∫—É http://localhost:3001/admin/catalog');
            console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –Ω–µ—Ç –æ—à–∏–±–æ–∫ FK –≤ –∫–æ–Ω—Å–æ–ª–∏');
            console.log('3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–º–ø–æ—Ä—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤');
          } else {
            console.log('‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
            console.log('üîß –ù—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å SQL –≤—Ä—É—á–Ω—É—é');
          }
          
          resolve(result);
        } catch (e) {
          console.log('üìÑ –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç:', responseData);
          resolve({ raw: responseData, status: res.statusCode });
        }
      });
    });

    req.on('error', (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
      reject(error);
    });

    req.write(data);
    req.end();
  });
}

checkMigrationResult()
  .then(result => {
    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    process.exit(0);
  })
  .catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
    process.exit(1);
  });
