const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

function loadEnv() {
  const envPath = path.join(process.cwd(), '.env.local');
  if (fs.existsSync(envPath)) {
    const envContent = fs.readFileSync(envPath, 'utf8');
    envContent.split('\n').forEach(line => {
      const [key, value] = line.split('=');
      if (key && value) {
        process.env[key.trim()] = value.trim();
      }
    });
  }
}
loadEnv();

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function fixSubcategoriesSchema() {
  console.log('üîß –ü—Ä–æ–≤–µ—Ä—è—é –∏ –∏—Å–ø—Ä–∞–≤–ª—è—é —Å—Ö–µ–º—É subcategories...\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ç–∞–±–ª–∏—Ü–∞ subcategories
    console.log('üìã –ü—Ä–æ–≤–µ—Ä—è—é —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã subcategories...');
    const schemaQueries = [
      "SELECT schemaname, tablename FROM pg_tables WHERE tablename = 'subcategories'",
      "SELECT table_schema, table_name FROM information_schema.tables WHERE table_name = 'subcategories'",
      "SELECT n.nspname as schema, c.relname as table FROM pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid WHERE c.relname = 'subcategories'"
    ];

    for (const query of schemaQueries) {
      try {
        const response = await fetch('http://localhost:3000/api/migrations/execute-sql', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ sql: query }),
        });
        const result = await response.json();
        if (result.success) {
          console.log(`‚úÖ ${query.substring(0, 50)}...`);
          console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç:`, result.results);
        } else {
          console.log(`‚ùå ${query.substring(0, 50)}...`);
          console.log(`   –û—à–∏–±–∫–∞:`, result.error);
        }
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ${query.substring(0, 50)}...: ${error.message}`);
      }
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    console.log('\nüîê –ü—Ä–æ–≤–µ—Ä—è—é –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞...');
    const permissionQueries = [
      "SELECT grantee, privilege_type FROM information_schema.role_table_grants WHERE table_name = 'subcategories'",
      "SELECT grantee, privilege_type FROM information_schema.role_table_grants WHERE table_name = 'categories'"
    ];

    for (const query of permissionQueries) {
      try {
        const response = await fetch('http://localhost:3000/api/migrations/execute-sql', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ sql: query }),
        });
        const result = await response.json();
        if (result.success) {
          console.log(`‚úÖ ${query.substring(0, 50)}...`);
          console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç:`, result.results);
        } else {
          console.log(`‚ùå ${query.substring(0, 50)}...`);
          console.log(`   –û—à–∏–±–∫–∞:`, result.error);
        }
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ${query.substring(0, 50)}...: ${error.message}`);
      }
    }

    // 3. –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É subcategories –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ö–µ–º–µ
    console.log('\nüîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—É subcategories...');
    const recreateSQL = `
      BEGIN;
      
      -- –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      DROP TABLE IF EXISTS public.subcategories CASCADE;
      
      -- –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
      CREATE TABLE public.subcategories (
        id SERIAL PRIMARY KEY,
        category_id INTEGER NOT NULL REFERENCES public.categories(id) ON DELETE CASCADE,
        name TEXT NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      );
      
      -- –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
      CREATE INDEX idx_subcategories_category_id ON public.subcategories(category_id);
      CREATE INDEX idx_subcategories_name ON public.subcategories(name);
      
      -- –î–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
      GRANT ALL ON public.subcategories TO anon;
      GRANT ALL ON public.subcategories TO authenticated;
      GRANT ALL ON public.subcategories TO service_role;
      GRANT USAGE, SELECT ON SEQUENCE public.subcategories_id_seq TO anon;
      GRANT USAGE, SELECT ON SEQUENCE public.subcategories_id_seq TO authenticated;
      GRANT USAGE, SELECT ON SEQUENCE public.subcategories_id_seq TO service_role;
      
      -- –û—Ç–∫–ª—é—á–∞–µ–º RLS –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      ALTER TABLE public.subcategories DISABLE ROW LEVEL SECURITY;
      
      COMMIT;
      
      -- –£–≤–µ–¥–æ–º–ª—è–µ–º PostgREST
      NOTIFY pgrst, 'reload schema';
      SELECT pg_notify('pgrst', 'reload schema');
    `;

    try {
      const response = await fetch('http://localhost:3000/api/migrations/execute-sql', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ sql: recreateSQL }),
      });
      const result = await response.json();
      if (result.success) {
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ subcategories –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã:', result.error);
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL:', error.message);
    }

    // 4. –ñ–¥–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º
    console.log('\n‚è≥ –ñ–¥—É 5 —Å–µ–∫—É–Ω–¥...');
    await new Promise(resolve => setTimeout(resolve, 5000));

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å subcategories...');
    const { data: subcategories, error: subError } = await supabase
      .from('subcategories')
      .select('*')
      .limit(1);
    
    if (subError) {
      console.log(`‚ùå Subcategories –≤—Å–µ –µ—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: ${subError.message}`);
    } else {
      console.log(`‚úÖ Subcategories —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã! –ù–∞–π–¥–µ–Ω–æ: ${subcategories?.length || 0}`);
    }

    // 6. –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    console.log('\nüìù –î–æ–±–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...');
    const { data: categories } = await supabase
      .from('categories')
      .select('id, name')
      .limit(1);
    
    if (categories && categories.length > 0) {
      const categoryId = categories[0].id;
      const { data: insertResult, error: insertError } = await supabase
        .from('subcategories')
        .insert([
          { category_id: categoryId, name: 'Test Subcategory 1' },
          { category_id: categoryId, name: 'Test Subcategory 2' }
        ])
        .select();
      
      if (insertError) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${insertError.message}`);
      } else {
        console.log(`‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã: ${insertResult?.length || 0} –∑–∞–ø–∏—Å–µ–π`);
      }
    }

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

fixSubcategoriesSchema();
