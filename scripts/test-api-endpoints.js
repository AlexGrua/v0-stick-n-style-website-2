const http = require('http');

async function testAPIEndpoint(path, description) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'localhost',
      port: 3001,
      path: path,
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    };

    const req = http.request(options, (res) => {
      let responseData = '';
      
      res.on('data', (chunk) => {
        responseData += chunk;
      });
      
      res.on('end', () => {
        try {
          const result = JSON.parse(responseData);
          console.log(`‚úÖ ${description}: ${res.statusCode} - OK`);
          resolve({ success: true, status: res.statusCode, data: result });
        } catch (e) {
          console.log(`‚ùå ${description}: ${res.statusCode} - Parse Error`);
          resolve({ success: false, status: res.statusCode, error: e.message });
        }
      });
    });

    req.on('error', (error) => {
      console.log(`‚ùå ${description}: Connection Error - ${error.message}`);
      resolve({ success: false, error: error.message });
    });

    req.end();
  });
}

async function testAllEndpoints() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É—é API endpoints –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏...\n');

  const endpoints = [
    { path: '/api/products?limit=1', description: 'Products API' },
    { path: '/api/categories', description: 'Categories API' },
    { path: '/api/suppliers', description: 'Suppliers API' },
    { path: '/api/products/import/reference', description: 'Import Reference API' },
    { path: '/api/subcategories', description: 'Subcategories API' }
  ];

  const results = [];

  for (const endpoint of endpoints) {
    const result = await testAPIEndpoint(endpoint.path, endpoint.description);
    results.push({ endpoint: endpoint.description, ...result });
  }

  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
  console.log('='.repeat(50));
  
  let successCount = 0;
  let errorCount = 0;

  results.forEach(result => {
    if (result.success) {
      successCount++;
      console.log(`‚úÖ ${result.endpoint}: –£—Å–ø–µ—à–Ω–æ`);
    } else {
      errorCount++;
      console.log(`‚ùå ${result.endpoint}: –û—à–∏–±–∫–∞ - ${result.error || 'Unknown'}`);
    }
  });

  console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}`);
  console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
  console.log(`üìä –í—Å–µ–≥–æ: ${results.length}`);

  if (errorCount === 0) {
    console.log('\nüéâ –í—Å–µ API endpoints —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
    console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ –∞–¥–º–∏–Ω–∫—É http://localhost:3001/admin/catalog');
    console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –Ω–µ—Ç –æ—à–∏–±–æ–∫ FK –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞');
    console.log('3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–º–ø–æ—Ä—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤');
  } else {
    console.log('\n‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å API endpoints');
    console.log('üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –¥–µ—Ç–∞–ª–µ–π');
  }

  return results;
}

testAllEndpoints()
  .then(results => {
    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    process.exit(0);
  })
  .catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    process.exit(1);
  });
