const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

function loadEnv() {
  const envPath = path.join(process.cwd(), '.env.local');
  if (fs.existsSync(envPath)) {
    const envContent = fs.readFileSync(envPath, 'utf8');
    envContent.split('\n').forEach(line => {
      const [key, value] = line.split('=');
      if (key && value) {
        process.env[key.trim()] = value.trim();
      }
    });
  }
}
loadEnv();

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function finalTest() {
  console.log('üéØ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã...\n');

  try {
    // 1. –¢–µ—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    console.log('üìã –¢–µ—Å—Ç 1: –ö–∞—Ç–µ–≥–æ—Ä–∏–∏');
    const { data: categories, error: catError } = await supabase
      .from('categories')
      .select('id, name, slug, subs')
      .limit(3);

    if (catError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${catError.message}`);
    } else {
      console.log(`‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categories?.length || 0} –∑–∞–ø–∏—Å–µ–π`);
      categories?.forEach(cat => {
        console.log(`  - ${cat.name} (ID: ${cat.id}, subs: ${cat.subs?.length || 0})`);
      });
    }

    // 2. –¢–µ—Å—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    console.log('\nüì¶ –¢–µ—Å—Ç 2: –ü—Ä–æ–¥—É–∫—Ç—ã');
    const { data: products, error: prodError } = await supabase
      .from('products')
      .select('id, name, category_id, specifications')
      .limit(3);

    if (prodError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${prodError.message}`);
    } else {
      console.log(`‚úÖ –ü—Ä–æ–¥—É–∫—Ç—ã: ${products?.length || 0} –∑–∞–ø–∏—Å–µ–π`);
      products?.forEach(prod => {
        const specs = prod.specifications || {};
        console.log(`  - ${prod.name} (ID: ${prod.id}, category: ${prod.category_id})`);
        console.log(`    SKU: ${specs.sku || 'N/A'}, Supplier: ${specs.supplierId || 'N/A'}`);
      });
    }

    // 3. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
    console.log('\nüìù –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞');
    const testProduct = {
      name: 'Final Test Product',
      description: 'Product for final testing',
      category_id: categories?.[0]?.id || 8,
      price: 150,
      slug: 'final-test-product-' + Date.now(),
      specifications: {
        sku: 'FINAL-TEST-' + Date.now(),
        supplierId: '4',
        status: 'inactive',
        technicalDescription: 'Final test product',
        sizes: ['200x200'],
        thickness: ['15mm'],
        pcsPerBox: 20,
        boxKg: 8.5,
        boxM3: 0.002,
        minOrderBoxes: 1
      }
    };

    const { data: newProduct, error: createError } = await supabase
      .from('products')
      .insert(testProduct)
      .select()
      .single();

    if (createError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: ${createError.message}`);
    } else {
      console.log(`‚úÖ –ü—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω: ${newProduct.name} (ID: ${newProduct.id})`);
      console.log(`  SKU: ${newProduct.specifications?.sku}`);
      console.log(`  Supplier: ${newProduct.specifications?.supplierId}`);
      
      // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç
      await supabase.from('products').delete().eq('id', newProduct.id);
      console.log('  ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç —É–¥–∞–ª–µ–Ω');
    }

    // 4. –¢–µ—Å—Ç suppliers
    console.log('\nüè¢ –¢–µ—Å—Ç 4: –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏');
    const { data: suppliers, error: suppError } = await supabase
      .from('suppliers')
      .select('id, name, email')
      .limit(3);

    if (suppError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: ${suppError.message}`);
    } else {
      console.log(`‚úÖ –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏: ${suppliers?.length || 0} –∑–∞–ø–∏—Å–µ–π`);
      suppliers?.forEach(supp => {
        console.log(`  - ${supp.name} (ID: ${supp.id})`);
      });
    }

    // 5. –¢–µ—Å—Ç subcategories API
    console.log('\nüìÇ –¢–µ—Å—Ç 5: Subcategories API');
    try {
      const response = await fetch('http://localhost:3000/api/subcategories');
      const data = await response.json();
      console.log(`‚úÖ Subcategories API: ${data.items?.length || 0} –∑–∞–ø–∏—Å–µ–π`);
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ Subcategories API: ${error.message}`);
    }

    console.log('\nüéâ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
    console.log('\nüìã –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:');
    console.log('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç');
    console.log('‚úÖ –ü—Ä–æ–¥—É–∫—Ç—ã —á–∏—Ç–∞—é—Ç—Å—è');
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏ —á–∏—Ç–∞—é—Ç—Å—è');
    console.log('‚úÖ Subcategories API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤');
    console.log('\nüöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

finalTest();
