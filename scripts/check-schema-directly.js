const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

function loadEnv() {
  const envPath = path.join(process.cwd(), '.env.local');
  if (fs.existsSync(envPath)) {
    const envContent = fs.readFileSync(envPath, 'utf8');
    envContent.split('\n').forEach(line => {
      const [key, value] = line.split('=');
      if (key && value) {
        process.env[key.trim()] = value.trim();
      }
    });
  }
}
loadEnv();

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function checkSchemaDirectly() {
  console.log('üîç –ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã –≤ Supabase...\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ SQL
    console.log('üìã –ü—Ä–æ–≤–µ—Ä—è—é —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ SQL...');
    
    const { data: tables, error: tablesError } = await supabase
      .rpc('exec_sql', { 
        sql: `
          SELECT table_name 
          FROM information_schema.tables 
          WHERE table_schema = 'public' 
          AND table_name IN ('products', 'categories', 'subcategories', 'suppliers')
          ORDER BY table_name;
        `
      });

    if (tablesError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü: ${tablesError.message}`);
    } else {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:', tables);
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ products
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è—é –∫–æ–ª–æ–Ω–∫–∏ products...');
    
    const { data: productColumns, error: productColumnsError } = await supabase
      .rpc('exec_sql', { 
        sql: `
          SELECT column_name, data_type, is_nullable
          FROM information_schema.columns 
          WHERE table_schema = 'public' 
          AND table_name = 'products'
          ORDER BY ordinal_position;
        `
      });

    if (productColumnsError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–æ–Ω–æ–∫ products: ${productColumnsError.message}`);
    } else {
      console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∏ products:');
      productColumns?.forEach(col => {
        console.log(`   - ${col.column_name}: ${col.data_type} (nullable: ${col.is_nullable})`);
      });
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ suppliers
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è—é –∫–æ–ª–æ–Ω–∫–∏ suppliers...');
    
    const { data: supplierColumns, error: supplierColumnsError } = await supabase
      .rpc('exec_sql', { 
        sql: `
          SELECT column_name, data_type, is_nullable
          FROM information_schema.columns 
          WHERE table_schema = 'public' 
          AND table_name = 'suppliers'
          ORDER BY ordinal_position;
        `
      });

    if (supplierColumnsError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–æ–Ω–æ–∫ suppliers: ${supplierColumnsError.message}`);
    } else {
      console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∏ suppliers:');
      supplierColumns?.forEach(col => {
        console.log(`   - ${col.column_name}: ${col.data_type} (nullable: ${col.is_nullable})`);
      });
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä—è—é –¥–∞–Ω–Ω—ã–µ...');
    
    // Categories
    const { data: categories, error: catError } = await supabase
      .from('categories')
      .select('id, name, slug')
      .limit(3);
    
    if (catError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è categories: ${catError.message}`);
    } else {
      console.log(`‚úÖ Categories: ${categories?.length || 0} –∑–∞–ø–∏—Å–µ–π`);
      categories?.forEach(cat => {
        console.log(`   - ${cat.name} (ID: ${cat.id}, slug: ${cat.slug})`);
      });
    }

    // Products
    const { data: products, error: prodError } = await supabase
      .from('products')
      .select('id, name')
      .limit(3);
    
    if (prodError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è products: ${prodError.message}`);
    } else {
      console.log(`‚úÖ Products: ${products?.length || 0} –∑–∞–ø–∏—Å–µ–π`);
      products?.forEach(prod => {
        console.log(`   - ${prod.name} (ID: ${prod.id})`);
      });
    }

    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä—É—é —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏...');
    
    if (categories && categories.length > 0) {
      const testProduct = {
        name: `Test Product ${Date.now()}`,
        category_id: categories[0].id,
        specifications: {
          status: 'inactive',
          test: true
        }
      };

      const { data: createdProduct, error: createError } = await supabase
        .from('products')
        .insert(testProduct)
        .select()
        .single();

      if (createError) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: ${createError.message}`);
      } else {
        console.log(`‚úÖ –ü—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω: ${createdProduct.name} (ID: ${createdProduct.id})`);
        
        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç
        const { error: deleteError } = await supabase
          .from('products')
          .delete()
          .eq('id', createdProduct.id);
        
        if (deleteError) {
          console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${deleteError.message}`);
        } else {
          console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç —É–¥–∞–ª–µ–Ω');
        }
      }
    }

    console.log('\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

checkSchemaDirectly();
