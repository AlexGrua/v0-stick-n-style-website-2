const http = require('http');

async function forceReloadSchema() {
  console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è—é PostgREST –∫–µ—à...');
  
  const data = JSON.stringify({
    sql: 'NOTIFY pgrst, \'reload schema\';'
  });
  
  const options = {
    hostname: 'localhost',
    port: 3001,
    path: '/api/migrations/execute-sql',
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Content-Length': data.length
    }
  };

  return new Promise((resolve, reject) => {
    const req = http.request(options, (res) => {
      let responseData = '';
      
      res.on('data', (chunk) => {
        responseData += chunk;
      });
      
      res.on('end', () => {
        try {
          const result = JSON.parse(responseData);
          console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞:');
          console.log(JSON.stringify(result, null, 2));
          resolve(result);
        } catch (e) {
          console.log('üìÑ –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç:', responseData);
          resolve({ raw: responseData, status: res.statusCode });
        }
      });
    });

    req.on('error', (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞:', error);
      reject(error);
    });

    req.write(data);
    req.end();
  });
}

async function waitAndTest() {
  console.log('‚è≥ –ñ–¥—É 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞...');
  await new Promise(resolve => setTimeout(resolve, 5000));
  
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É—é API –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞...');
  
  const endpoints = [
    { path: '/api/products?limit=1', description: 'Products API' },
    { path: '/api/categories', description: 'Categories API' },
    { path: '/api/subcategories', description: 'Subcategories API' }
  ];

  for (const endpoint of endpoints) {
    try {
      const result = await testEndpoint(endpoint.path, endpoint.description);
      console.log(`‚úÖ ${endpoint.description}: ${result.status} - ${result.success ? 'OK' : 'ERROR'}`);
    } catch (error) {
      console.log(`‚ùå ${endpoint.description}: ERROR - ${error.message}`);
    }
  }
}

function testEndpoint(path, description) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'localhost',
      port: 3001,
      path: path,
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    };

    const req = http.request(options, (res) => {
      let responseData = '';
      
      res.on('data', (chunk) => {
        responseData += chunk;
      });
      
      res.on('end', () => {
        try {
          JSON.parse(responseData);
          resolve({ success: true, status: res.statusCode });
        } catch (e) {
          resolve({ success: false, status: res.statusCode, error: e.message });
        }
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    req.end();
  });
}

async function main() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞—é –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞...\n');
    
    // 1. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
    await forceReloadSchema();
    
    // 2. –ñ–¥–µ–º –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º
    await waitAndTest();
    
    console.log('\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
    console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ –∞–¥–º–∏–Ω–∫—É http://localhost:3001/admin/catalog');
    console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ - –æ—à–∏–±–∫–∏ FK –¥–æ–ª–∂–Ω—ã –∏—Å—á–µ–∑–Ω—É—Ç—å');
    console.log('3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–º–ø–æ—Ä—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å–Ω–æ–≤–∞');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞:', error);
    console.log('\nüîß –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ:');
    console.log('1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (Ctrl+C, –∑–∞—Ç–µ–º npm run dev)');
    console.log('2. –ò–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ SQL –≤ Supabase Console: NOTIFY pgrst, \'reload schema\';');
  }
}

main();
