const http = require('http');

async function checkDatabaseState() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...');
  
  const data = JSON.stringify({
    sql: `
      -- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã subcategories
      SELECT to_regclass('public.subcategories') as subcategories_table;
      
      -- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ –≤ products
      SELECT column_name, data_type, is_nullable 
      FROM information_schema.columns
      WHERE table_schema='public' 
        AND table_name='products' 
        AND column_name IN ('sku','subcategory_id','specifications');
      
      -- –ü—Ä–æ–≤–µ—Ä–∫–∞ FK —Å–≤—è–∑–µ–π
      SELECT 
        tc.constraint_name,
        tc.table_name,
        kcu.column_name,
        ccu.table_name AS foreign_table_name
      FROM information_schema.table_constraints AS tc
      JOIN information_schema.key_column_usage AS kcu
        ON tc.constraint_name = kcu.constraint_name
      JOIN information_schema.constraint_column_usage AS ccu
        ON ccu.constraint_name = tc.constraint_name
      WHERE tc.constraint_type = 'FOREIGN KEY'
        AND tc.table_name IN ('products', 'subcategories');
    `
  });
  
  const options = {
    hostname: 'localhost',
    port: 3001,
    path: '/api/migrations/execute-sql',
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Content-Length': data.length
    }
  };

  return new Promise((resolve, reject) => {
    const req = http.request(options, (res) => {
      let responseData = '';
      
      res.on('data', (chunk) => {
        responseData += chunk;
      });
      
      res.on('end', () => {
        try {
          const result = JSON.parse(responseData);
          console.log('üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:');
          console.log(JSON.stringify(result, null, 2));
          resolve(result);
        } catch (e) {
          console.log('üìÑ –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç:', responseData);
          resolve({ raw: responseData, status: res.statusCode });
        }
      });
    });

    req.on('error', (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î:', error);
      reject(error);
    });

    req.write(data);
    req.end();
  });
}

async function testDirectPostgREST() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É—é –ø—Ä—è–º—ã–µ PostgREST –∑–∞–ø—Ä–æ—Å—ã...');
  
  const endpoints = [
    { path: '/rest/v1/subcategories?select=id,category_id,slug&limit=1', description: 'PostgREST Subcategories' },
    { path: '/rest/v1/products?select=id,sku,subcategory_id&limit=1', description: 'PostgREST Products' },
    { path: '/rest/v1/categories?select=id,name,slug&limit=1', description: 'PostgREST Categories' }
  ];

  for (const endpoint of endpoints) {
    try {
      const result = await testDirectEndpoint(endpoint.path, endpoint.description);
      console.log(`‚úÖ ${endpoint.description}: ${result.status} - ${result.success ? 'OK' : 'ERROR'}`);
    } catch (error) {
      console.log(`‚ùå ${endpoint.description}: ERROR - ${error.message}`);
    }
  }
}

function testDirectEndpoint(path, description) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'localhost',
      port: 3001,
      path: path,
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'apikey': process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'test-key',
        'Authorization': `Bearer ${process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'test-key'}`
      }
    };

    const req = http.request(options, (res) => {
      let responseData = '';
      
      res.on('data', (chunk) => {
        responseData += chunk;
      });
      
      res.on('end', () => {
        try {
          const data = JSON.parse(responseData);
          console.log(`üìÑ ${description} –æ—Ç–≤–µ—Ç:`, data);
          resolve({ success: true, status: res.statusCode, data });
        } catch (e) {
          resolve({ success: false, status: res.statusCode, error: e.message, raw: responseData });
        }
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    req.end();
  });
}

async function testAPIEndpoints() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É—é API endpoints...');
  
  const endpoints = [
    { path: '/api/products?limit=1', description: 'API Products' },
    { path: '/api/categories', description: 'API Categories' },
    { path: '/api/subcategories', description: 'API Subcategories' },
    { path: '/api/products/import/reference', description: 'API Import Reference' }
  ];

  for (const endpoint of endpoints) {
    try {
      const result = await testAPIEndpoint(endpoint.path, endpoint.description);
      console.log(`‚úÖ ${endpoint.description}: ${result.status} - ${result.success ? 'OK' : 'ERROR'}`);
    } catch (error) {
      console.log(`‚ùå ${endpoint.description}: ERROR - ${error.message}`);
    }
  }
}

function testAPIEndpoint(path, description) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'localhost',
      port: 3001,
      path: path,
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    };

    const req = http.request(options, (res) => {
      let responseData = '';
      
      res.on('data', (chunk) => {
        responseData += chunk;
      });
      
      res.on('end', () => {
        try {
          const data = JSON.parse(responseData);
          resolve({ success: true, status: res.statusCode, data });
        } catch (e) {
          resolve({ success: false, status: res.statusCode, error: e.message, raw: responseData });
        }
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    req.end();
  });
}

async function main() {
  try {
    console.log('üöÄ –ü–†–û–í–ï–†–ö–ê –ü–û–°–õ–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø POSTGREST –ö–ï–®–ê\n');
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î
    console.log('üìã –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î');
    await checkDatabaseState();
    
    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º—ã–µ PostgREST –∑–∞–ø—Ä–æ—Å—ã
    console.log('\nüìã –®–∞–≥ 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º—ã—Ö PostgREST –∑–∞–ø—Ä–æ—Å–æ–≤');
    await testDirectPostgREST();
    
    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º API endpoints
    console.log('\nüìã –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints');
    await testAPIEndpoints();
    
    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢:');
    console.log('–ï—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ:');
    console.log('1. PostgREST –∫–µ—à –æ–±–Ω–æ–≤–∏–ª—Å—è ‚úÖ');
    console.log('2. –û—à–∏–±–∫–∏ FK –∏—Å—á–µ–∑–ª–∏ ‚úÖ');
    console.log('3. –ò–º–ø–æ—Ä—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å ‚úÖ');
    console.log('\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
    console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ –∞–¥–º–∏–Ω–∫—É http://localhost:3001/admin/catalog');
    console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ - –æ—à–∏–±–∫–∏ FK –¥–æ–ª–∂–Ω—ã –∏—Å—á–µ–∑–Ω—É—Ç—å');
    console.log('3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–º–ø–æ—Ä—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
    console.log('\nüîß –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ exposed schemas –≤ Supabase Settings ‚Üí API');
    console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ API –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –≤ Supabase');
    console.log('3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏');
  }
}

main();
