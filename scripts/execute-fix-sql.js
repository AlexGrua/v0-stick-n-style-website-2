const http = require('http');

async function executeSQLStep(stepName, sql) {
  console.log(`üìù –í—ã–ø–æ–ª–Ω—è—é: ${stepName}`);
  
  const data = JSON.stringify({ sql });
  
  const options = {
    hostname: 'localhost',
    port: 3001,
    path: '/api/migrations/execute-sql',
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Content-Length': data.length
    }
  };

  return new Promise((resolve, reject) => {
    const req = http.request(options, (res) => {
      let responseData = '';
      
      res.on('data', (chunk) => {
        responseData += chunk;
      });
      
      res.on('end', () => {
        try {
          const result = JSON.parse(responseData);
          console.log(`‚úÖ ${stepName} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ`);
          resolve(result);
        } catch (e) {
          console.log(`‚ùå ${stepName} –æ—à–∏–±–∫–∞:`, responseData);
          resolve({ error: responseData, status: res.statusCode });
        }
      });
    });

    req.on('error', (error) => {
      console.error(`‚ùå –û—à–∏–±–∫–∞ ${stepName}:`, error);
      reject(error);
    });

    req.write(data);
    req.end();
  });
}

async function main() {
  try {
    console.log('üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï SUBCATEGORIES\n');

    // –®–∞–≥ 1: –£–¥–∞–ª—è–µ–º –∫—Ä–∏–≤—ã–µ subcategories
    await executeSQLStep('–£–¥–∞–ª–µ–Ω–∏–µ subcategories', 'DROP TABLE IF EXISTS subcategories CASCADE;');

    // –®–∞–≥ 2: –°–æ–∑–¥–∞–µ–º subcategories –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    await executeSQLStep('–°–æ–∑–¥–∞–Ω–∏–µ subcategories', `
      CREATE TABLE subcategories (
        id SERIAL PRIMARY KEY,
        category_id INTEGER NOT NULL REFERENCES categories(id) ON DELETE CASCADE,
        name TEXT NOT NULL,
        slug TEXT NOT NULL,
        description TEXT,
        image_url TEXT,
        sort_order INTEGER DEFAULT 0,
        is_active BOOLEAN DEFAULT true,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        UNIQUE(category_id, slug)
      );
    `);

    // –®–∞–≥ 3: –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –≤ products
    await executeSQLStep('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –≤ products', `
      ALTER TABLE IF EXISTS products 
        ADD COLUMN IF NOT EXISTS sku TEXT,
        ADD COLUMN IF NOT EXISTS subcategory_id INTEGER,
        ADD COLUMN IF NOT EXISTS specifications JSONB NOT NULL DEFAULT '{}'::jsonb;
    `);

    // –®–∞–≥ 4: –î–æ–±–∞–≤–ª—è–µ–º FK
    await executeSQLStep('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ FK', `
      DO $$
      BEGIN
        IF NOT EXISTS (
          SELECT 1 FROM information_schema.table_constraints
          WHERE constraint_schema = 'public' 
            AND table_name = 'products' 
            AND constraint_name = 'products_subcategory_fk'
        ) THEN
          ALTER TABLE products
            ADD CONSTRAINT products_subcategory_fk 
            FOREIGN KEY (subcategory_id) 
            REFERENCES subcategories(id) ON DELETE SET NULL;
        END IF;
      END $$;
    `);

    // –®–∞–≥ 5: –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
    await executeSQLStep('–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤', `
      CREATE INDEX IF NOT EXISTS idx_products_sku ON products(sku);
      CREATE INDEX IF NOT EXISTS idx_products_subcategory_id ON products(subcategory_id);
      CREATE INDEX IF NOT EXISTS idx_subcategories_category_id ON subcategories(category_id);
      CREATE INDEX IF NOT EXISTS idx_products_specifications_gin ON products USING GIN (specifications);
    `);

    // –®–∞–≥ 6: –û—Ç–∫–ª—é—á–∞–µ–º RLS
    await executeSQLStep('–û—Ç–∫–ª—é—á–µ–Ω–∏–µ RLS', `
      ALTER TABLE products DISABLE ROW LEVEL SECURITY;
      ALTER TABLE categories DISABLE ROW LEVEL SECURITY;
      ALTER TABLE subcategories DISABLE ROW LEVEL SECURITY;
      ALTER TABLE suppliers DISABLE ROW LEVEL SECURITY;
    `);

    // –®–∞–≥ 7: –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
    await executeSQLStep('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–º–æ subcategories', `
      INSERT INTO subcategories (category_id, name, slug, description) 
      SELECT 
        c.id,
        'Plain Color',
        'plain-color',
        '–û–¥–Ω–æ—Ç–æ–Ω–Ω—ã–µ –ø–∞–Ω–µ–ª–∏'
      FROM categories c 
      WHERE c.name = 'Wall Panel';
    `);

    await executeSQLStep('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–π subcategory', `
      INSERT INTO subcategories (category_id, name, slug, description) 
      SELECT 
        c.id,
        'Brick Structure',
        'brick-structure',
        '–ü–∞–Ω–µ–ª–∏ —Å —Ç–µ–∫—Å—Ç—É—Ä–æ–π –∫–∏—Ä–ø–∏—á–∞'
      FROM categories c 
      WHERE c.name = 'Wall Panel';
    `);

    // –®–∞–≥ 8: –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–º–æ-–ø—Ä–æ–¥—É–∫—Ç
    await executeSQLStep('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–º–æ-–ø—Ä–æ–¥—É–∫—Ç–∞', `
      INSERT INTO products (
        sku, 
        name, 
        description, 
        category_id, 
        subcategory_id, 
        supplier_id, 
        image_url, 
        price, 
        in_stock, 
        slug, 
        specifications
      ) 
      SELECT 
        'DEMO-001',
        '–î–µ–º–æ –ø–∞–Ω–µ–ª—å',
        '–¢–µ—Å—Ç–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏',
        c.id,
        sc.id,
        s.id,
        'https://via.placeholder.com/300x200',
        1000,
        true,
        'demo-panel',
        '{"status": "active", "colorVariants": [{"name": "–ë–µ–ª—ã–π", "code": "WHITE"}]}'::jsonb
      FROM categories c
      JOIN subcategories sc ON sc.category_id = c.id
      JOIN suppliers s ON s.code = 'S001'
      WHERE c.name = 'Wall Panel' 
        AND sc.name = 'Plain Color'
        AND NOT EXISTS (SELECT 1 FROM products WHERE sku = 'DEMO-001');
    `);

    // –®–∞–≥ 9: –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à PostgREST
    await executeSQLStep('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞ PostgREST', `
      NOTIFY pgrst, 'reload schema';
      SELECT pg_notify('pgrst', 'reload schema');
    `);

    console.log('\n‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
    console.log('üìã –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ API –≤ Supabase –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', error);
  }
}

main();
