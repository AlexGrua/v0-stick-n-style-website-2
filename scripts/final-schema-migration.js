const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

function loadEnv() {
  const envPath = path.join(process.cwd(), '.env.local');
  if (fs.existsSync(envPath)) {
    const envContent = fs.readFileSync(envPath, 'utf8');
    envContent.split('\n').forEach(line => {
      const [key, value] = line.split('=');
      if (key && value) {
        process.env[key.trim()] = value.trim();
      }
    });
  }
}
loadEnv();

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function finalSchemaMigration() {
  console.log('üîß –§–∏–Ω–∞–ª—å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è —Å—Ö–µ–º—ã –∫ –µ–¥–∏–Ω–æ–º—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É...\n');

  try {
    // 1. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É subcategories –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    console.log('üìù –°–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—É subcategories...');
    const createSubcategoriesSQL = `
      CREATE TABLE IF NOT EXISTS subcategories (
        id SERIAL PRIMARY KEY,
        category_id INTEGER NOT NULL REFERENCES categories(id) ON DELETE CASCADE,
        name TEXT NOT NULL,
        slug TEXT NOT NULL,
        description TEXT,
        image_url TEXT,
        sort_order INTEGER DEFAULT 0,
        is_active BOOLEAN DEFAULT true,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        UNIQUE(category_id, slug)
      );
    `;

    try {
      const response = await fetch('http://localhost:3000/api/migrations/execute-sql', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ sql: createSubcategoriesSQL }),
      });
      const result = await response.json();
      if (result.success) {
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ subcategories —Å–æ–∑–¥–∞–Ω–∞');
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è subcategories:', result.error);
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL:', error.message);
    }

    // 2. –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ products
    console.log('\nüìù –î–æ–±–∞–≤–ª—è—é –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ products...');
    const alterProductsSQL = `
      ALTER TABLE IF EXISTS products 
        ADD COLUMN IF NOT EXISTS sku TEXT,
        ADD COLUMN IF NOT EXISTS subcategory_id INTEGER,
        ADD COLUMN IF NOT EXISTS supplier_id INTEGER,
        ADD COLUMN IF NOT EXISTS specifications JSONB NOT NULL DEFAULT '{}'::jsonb;
    `;

    try {
      const response = await fetch('http://localhost:3000/api/migrations/execute-sql', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ sql: alterProductsSQL }),
      });
      const result = await response.json();
      if (result.success) {
        console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∏ –≤ products –¥–æ–±–∞–≤–ª–µ–Ω—ã');
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫:', result.error);
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL:', error.message);
    }

    // 3. –î–æ–±–∞–≤–ª—è–µ–º FK –¥–ª—è subcategory_id
    console.log('\nüîó –î–æ–±–∞–≤–ª—è—é FK –¥–ª—è subcategory_id...');
    const addFKSQL = `
      DO $$
      BEGIN
        IF NOT EXISTS (
          SELECT 1 FROM information_schema.table_constraints
          WHERE constraint_schema = 'public' 
            AND table_name = 'products' 
            AND constraint_name = 'products_subcategory_fk'
        ) THEN
          ALTER TABLE products
            ADD CONSTRAINT products_subcategory_fk 
            FOREIGN KEY (subcategory_id) 
            REFERENCES subcategories(id) ON DELETE SET NULL;
        END IF;
      END $$;
    `;

    try {
      const response = await fetch('http://localhost:3000/api/migrations/execute-sql', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ sql: addFKSQL }),
      });
      const result = await response.json();
      if (result.success) {
        console.log('‚úÖ FK –¥–ª—è subcategory_id –¥–æ–±–∞–≤–ª–µ–Ω');
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è FK:', result.error);
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL:', error.message);
    }

    // 4. –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É code –≤ suppliers
    console.log('\nüìù –î–æ–±–∞–≤–ª—è—é –∫–æ–ª–æ–Ω–∫—É code –≤ suppliers...');
    const alterSuppliersSQL = `
      ALTER TABLE IF EXISTS suppliers 
        ADD COLUMN IF NOT EXISTS code VARCHAR(10);
      
      -- –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è code
      CREATE UNIQUE INDEX IF NOT EXISTS idx_suppliers_code ON suppliers(code);
    `;

    try {
      const response = await fetch('http://localhost:3000/api/migrations/execute-sql', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ sql: alterSuppliersSQL }),
      });
      const result = await response.json();
      if (result.success) {
        console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ code –≤ suppliers –¥–æ–±–∞–≤–ª–µ–Ω–∞');
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è code:', result.error);
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL:', error.message);
    }

    // 5. –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
    console.log('\nüìä –°–æ–∑–¥–∞—é –∏–Ω–¥–µ–∫—Å—ã...');
    const createIndexesSQL = `
      CREATE INDEX IF NOT EXISTS idx_products_sku ON products(sku);
      CREATE INDEX IF NOT EXISTS idx_products_subcategory_id ON products(subcategory_id);
      CREATE INDEX IF NOT EXISTS idx_products_supplier_id ON products(supplier_id);
      CREATE INDEX IF NOT EXISTS idx_subcategories_category_id ON subcategories(category_id);
      CREATE INDEX IF NOT EXISTS idx_products_specifications_gin ON products USING GIN (specifications);
    `;

    try {
      const response = await fetch('http://localhost:3000/api/migrations/execute-sql', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ sql: createIndexesSQL }),
      });
      const result = await response.json();
      if (result.success) {
        console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã');
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤:', result.error);
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL:', error.message);
    }

    // 6. –û—Ç–∫–ª—é—á–∞–µ–º RLS –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
    console.log('\nüîì –û—Ç–∫–ª—é—á–∞—é RLS –¥–ª—è –∞–¥–º–∏–Ω–∫–∏...');
    const disableRLSSQL = `
      ALTER TABLE products DISABLE ROW LEVEL SECURITY;
      ALTER TABLE categories DISABLE ROW LEVEL SECURITY;
      ALTER TABLE subcategories DISABLE ROW LEVEL SECURITY;
      ALTER TABLE suppliers DISABLE ROW LEVEL SECURITY;
    `;

    try {
      const response = await fetch('http://localhost:3000/api/migrations/execute-sql', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ sql: disableRLSSQL }),
      });
      const result = await response.json();
      if (result.success) {
        console.log('‚úÖ RLS –æ—Ç–∫–ª—é—á–µ–Ω');
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è RLS:', result.error);
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL:', error.message);
    }

    // 7. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º PostgREST
    console.log('\nüîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é PostgREST...');
    const reloadSQL = `
      NOTIFY pgrst, 'reload schema';
      SELECT pg_notify('pgrst', 'reload schema');
    `;

    try {
      const response = await fetch('http://localhost:3000/api/migrations/execute-sql', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ sql: reloadSQL }),
      });
      const result = await response.json();
      if (result.success) {
        console.log('‚úÖ PostgREST –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω');
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ PostgREST:', result.error);
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL:', error.message);
    }

    // 8. –ñ–¥–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\n‚è≥ –ñ–¥—É 5 —Å–µ–∫—É–Ω–¥...');
    await new Promise(resolve => setTimeout(resolve, 5000));

    // 9. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º subcategories
    const { data: subcategories, error: subError } = await supabase
      .from('subcategories')
      .select('id, name, category_id')
      .limit(5);
    
    if (subError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è subcategories: ${subError.message}`);
    } else {
      console.log(`‚úÖ Subcategories: ${subcategories?.length || 0} –∑–∞–ø–∏—Å–µ–π`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º suppliers
    const { data: suppliers, error: supError } = await supabase
      .from('suppliers')
      .select('id, name, code')
      .limit(5);
    
    if (supError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è suppliers: ${supError.message}`);
    } else {
      console.log(`‚úÖ Suppliers: ${suppliers?.length || 0} –∑–∞–ø–∏—Å–µ–π`);
      suppliers?.forEach(sup => {
        console.log(`   - ${sup.name} (ID: ${sup.id}, code: ${sup.code || 'N/A'})`);
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º products
    const { data: products, error: prodError } = await supabase
      .from('products')
      .select('id, sku, category_id, subcategory_id, supplier_id, specifications')
      .limit(1);
    
    if (prodError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è products: ${prodError.message}`);
    } else if (products && products.length > 0) {
      const product = products[0];
      console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ products –æ–±–Ω–æ–≤–ª–µ–Ω–∞:');
      console.log(`   - sku: ${typeof product.sku}`);
      console.log(`   - category_id: ${typeof product.category_id}`);
      console.log(`   - subcategory_id: ${typeof product.subcategory_id}`);
      console.log(`   - supplier_id: ${typeof product.supplier_id}`);
      console.log(`   - specifications: ${typeof product.specifications}`);
    }

    console.log('\nüéâ –§–∏–Ω–∞–ª—å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('\nüìã –°—Ö–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞:');
    console.log('   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ subcategories —Å–æ–∑–¥–∞–Ω–∞');
    console.log('   ‚úÖ –ö–æ–ª–æ–Ω–∫–∏ –≤ products –¥–æ–±–∞–≤–ª–µ–Ω—ã');
    console.log('   ‚úÖ FK —Å–≤—è–∑–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    console.log('   ‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã');
    console.log('   ‚úÖ RLS –æ—Ç–∫–ª—é—á–µ–Ω');
    console.log('   ‚úÖ PostgREST –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

finalSchemaMigration();
