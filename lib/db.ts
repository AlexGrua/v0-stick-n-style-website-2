import { supabaseAdmin } from "./supabase/server"
import type { Product, Category, Attribute, Settings, HomePageData } from "./types"
import { generateSku } from "./sku"

type DBShape = {
  seeded: boolean
  products: Product[]
  categories: Category[]
  containers: any[]
  attributes: Attribute[]
  settings: Settings
  homePage: HomePageData
}

export async function getHomePageData(): Promise<HomePageData | null> {
  try {
    const { data, error } = await supabaseAdmin.from("home_page_data").select("*").single()

    if (error) {
      // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ "PGRST116" - –∑–Ω–∞—á–∏—Ç –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Å—Ç–æ –Ω–µ—Ç, –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
      if (error.code === "PGRST116") {
        console.log("No home page data found, creating default data for the first time")
        const defaultData = getDefaultHomePageData()
        await saveHomePageData(defaultData)
        return defaultData
      }

      // –ü—Ä–∏ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–∫–∞—Ö –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
      console.error("Error fetching home page data:", error)
      return null
    }

    if (!data) {
      // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ—Ç –≤ –ë–î, —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
      console.log("No home page data found, creating default data for the first time")
      const defaultData = getDefaultHomePageData()
      await saveHomePageData(defaultData)
      return defaultData
    }

    return data.data as HomePageData
  } catch (error) {
    console.error("Error in getHomePageData:", error)
    return null
  }
}

export async function saveHomePageData(data: HomePageData): Promise<boolean> {
  try {
    const { error } = await supabaseAdmin.from("home_page_data").upsert({
      id: 1, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID –¥–ª—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
      data: data,
      updated_at: new Date().toISOString(),
    })

    if (error) {
      console.error("Error saving home page data:", error)
      return false
    }

    return true
  } catch (error) {
    console.error("Error in saveHomePageData:", error)
    return false
  }
}

function getDefaultHomePageData(): HomePageData {
  const now = new Date().toISOString()
  return {
         hero: {
       title: "Stick'N'Style",
       subtitle: "–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–µ –æ—Ç–¥–µ–ª–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
       description: "–°–æ–∑–¥–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—å–µ—Ä —Å –Ω–∞—à–∏–º–∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏ –¥–ª—è —Å—Ç–µ–Ω –∏ –ø–æ–ª–æ–≤",
       backgroundImage: "/modern-interior-3d-panels.png",
       ctaText: "–°–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥",
       ctaLink: "/catalog",
       buttons: [],
       visible: true,
     },
    advantages: {
      title: "–ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞",
      subtitle: "–ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç –Ω–∞—Å",
      advantages: [
        {
          id: crypto.randomUUID(),
          icon: "üèÜ",
          title: "–ü—Ä–µ–º–∏–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ",
          description: "–¢–æ–ª—å–∫–æ –ª—É—á—à–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π",
        },
        {
          id: crypto.randomUUID(),
          icon: "üöö",
          title: "–ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞",
          description: "–î–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É –≤ –∫—Ä–∞—Ç—á–∞–π—à–∏–µ —Å—Ä–æ–∫–∏",
        },
        {
          id: crypto.randomUUID(),
          icon: "üí°",
          title: "–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è",
          description: "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞",
        },
      ],
      visible: true,
    },
    productGallery: {
      title: "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã",
      subtitle: "–ù–∞—à–∏ –±–µ—Å—Ç—Å–µ–ª–ª–µ—Ä—ã",
      products: [
        {
          id: crypto.randomUUID(),
          name: "3D –ü–∞–Ω–µ–ª–∏",
          image: "/stone-brick-wall-panels.png",
          category: "wall-panel",
          link: "/catalog/wall-panel",
        },
        {
          id: crypto.randomUUID(),
          name: "–ù–∞–ø–æ–ª—å–Ω—ã–µ –ø–æ–∫—Ä—ã—Ç–∏—è",
          image: "/wood-flooring-textures.png",
          category: "flooring",
          link: "/catalog/flooring",
        },
      ],
      visible: true,
    },
         cooperation: {
       title: "–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ",
       subtitle: "–†–∞–±–æ—Ç–∞–µ–º —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∞–º–∏",
       description: "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –¥–∏–∑–∞–π–Ω–µ—Ä–æ–≤, –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–æ–≤ –∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π",
       backgroundImage: "/fabric-texture-wall-panels.png",
       ctaText: "–°—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º",
       ctaLink: "/partnership",
       features: [],
       buttons: [],
       visible: true,
     },
    customBlocks: [],
    updatedAt: now,
  }
}

declare global {
  // eslint-disable-next-line no-var
  var __MEMDB__: DBShape | undefined
}

export function db(): DBShape {
  if (!globalThis.__MEMDB__) {
    const now = new Date().toISOString()
    globalThis.__MEMDB__ = {
      seeded: false,
      products: [],
      categories: [],
      containers: [],
      attributes: [],
      settings: {
        companyName: "Stick'N'Style",
        defaultLocale: "en",
        currency: "USD",
        exportColumns: [
          "sku",
          "name",
          "category",
          "sub",
          "sizes",
          "thickness",
          "pcsPerBox",
          "boxKg",
          "boxM3",
          "status",
          "thumbnailUrl",
        ],
        exportLogoUrl: "",
        createdAt: now,
        updatedAt: now,
      },
      homePage: getDefaultHomePageData(),
    }
  }
  return globalThis.__MEMDB__!
}

export function seed() {
  const state = db()
  if (state.seeded) return

  const now = new Date().toISOString()
  // Seed categories with subs
  const mkCat = (name: string, slug: string, subs: string[]): Category => ({
    id: crypto.randomUUID(),
    name,
    slug,
    subs: subs.map((n) => ({ id: crypto.randomUUID(), name: n })),
    createdAt: now,
    updatedAt: now,
  })
  const wp = mkCat("Wall Panel", "wall-panel", ["Sub 1", "Sub 2", "Sub 3"])
  const fl = mkCat("Flooring", "flooring", ["Sub 1", "Sub 2", "Sub 3"])
  const ad = mkCat("Adhesive", "adhesive", ["Sub 1", "Sub 2"])
  const ac = mkCat("Accessories", "accessories", ["Sub 1", "Sub 2", "Sub 3"])
  state.categories = [wp, fl, ad, ac]

  // Helper to generate default colors
  const defaultColors = () => [
    {
      id: crypto.randomUUID(),
      nameEn: "White",
      nameRu: "–ë–µ–ª—ã–π",
      photoUrl: "/swatches/white.png",
      createdAt: now,
      updatedAt: now,
    },
    {
      id: crypto.randomUUID(),
      nameEn: "Black",
      nameRu: "–ß–µ—Ä–Ω—ã–π",
      photoUrl: "/swatches/black.png",
      createdAt: now,
      updatedAt: now,
    },
  ]

     // Seed a few products
   const make = (partial: Partial<Product>): Product => ({
     id: crypto.randomUUID(),
     sku: partial.sku ?? generateSku((partial.category ?? "wall-panel") as any),
     name: partial.name ?? "Sample",
     description: partial.description,
     technicalDescription: partial.description ?? "High-quality finish suitable for interiors.",
     photos: { main: partial.thumbnailUrl, others: [] },
     infographics: { main: "/abstract-geometric-shapes.png", others: [] },
     colors: (partial.colors as any) ?? (defaultColors() as any),
     category: (partial.category as any) ?? "wall-panel",
     sub: partial.sub ?? "Sub 1",
     thickness: partial.thickness ?? ["2 mm"],
     sizes: partial.sizes ?? ["60√ó60cm"],
     pcsPerBox: partial.pcsPerBox ?? 50,
     boxKg: partial.boxKg ?? 31,
     boxM3: partial.boxM3 ?? 1.2,
     minOrderBoxes: 1,
     status: (partial.status as any) ?? "active",
     tags: [],
     customFields: {},
     thumbnailUrl: partial.thumbnailUrl,
     gallery: [],
     stockLevel: 0,
     version: 1,
     technicalSpecifications: [],
     colorVariants: [],
     createdAt: now,
     updatedAt: now,
   })

  state.products = [
    make({ name: "A4", category: "wall-panel", sub: "Sub 1", thumbnailUrl: "/simple-wooden-panel.png" }),
    make({ name: "A5", category: "wall-panel", sub: "Sub 2", thumbnailUrl: "/simple-wooden-panel.png" }),
    make({ name: "Oak Prime", category: "flooring", sub: "Sub 1", thumbnailUrl: "/interior-flooring.png" }),
    make({ name: "Metro Tile", category: "adhesive", sub: "Sub 1", thumbnailUrl: "/decorative-tile.png" }),
  ]

  // Seed containers
  state.containers = [
    {
      id: crypto.randomUUID(),
      name: "20'",
      code: "20",
      capacityKg: 28000,
      capacityM3: 28,
      createdAt: now,
      updatedAt: now,
    },
    {
      id: crypto.randomUUID(),
      name: "40'",
      code: "40",
      capacityKg: 28000,
      capacityM3: 68,
      createdAt: now,
      updatedAt: now,
    },
    {
      id: crypto.randomUUID(),
      name: "40HC",
      code: "40HC",
      capacityKg: 28000,
      capacityM3: 76,
      createdAt: now,
      updatedAt: now,
    },
  ]

  // Seed attributes
  state.attributes = [
    {
      id: crypto.randomUUID(),
      name: "Surface",
      code: "surface",
      type: "select",
      required: false,
      public: true,
      options: ["Matte", "Glossy", "Textured"],
      unit: undefined,
      min: undefined,
      max: undefined,
      step: undefined,
      categoryIds: [wp.id],
      order: 1,
      createdAt: now,
      updatedAt: now,
    },
    {
      id: crypto.randomUUID(),
      name: "Waterproof",
      code: "waterproof",
      type: "boolean",
      required: false,
      public: true,
      options: [],
      unit: undefined,
      min: undefined,
      max: undefined,
      step: undefined,
      categoryIds: [fl.id, ad.id],
      order: 2,
      createdAt: now,
      updatedAt: now,
    },
  ]

  state.seeded = true

  // –î–∞–Ω–Ω—ã–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ db()
  // –∏ –±–æ–ª—å—à–µ –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
}

export async function getProducts(): Promise<Product[]> {
  try {
    const { data, error } = await supabaseAdmin.from("products").select("*").order("created_at", { ascending: false })

    if (error) {
      console.error("Error fetching products:", error)
      return []
    }

         // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase –≤ —Ñ–æ—Ä–º–∞—Ç Product
     return (data || []).map((row: any) => ({
       id: row.id,
       sku: row.sku,
       name: row.name,
       description: row.description,
       technicalDescription: row.technical_description,
       photos: row.photos || { main: row.thumbnail_url, others: [] },
       infographics: row.infographics || { main: "/abstract-geometric-shapes.png", others: [] },
       colors: row.colors || [],
       category: row.category,
       sub: row.sub,
       thickness: row.thickness || [],
       sizes: row.sizes || [],
       pcsPerBox: row.pcs_per_box || 0,
       boxKg: row.box_kg || 0,
       boxM3: row.box_m3 || 0,
       minOrderBoxes: row.min_order_boxes || 1,
       status: row.status,
       tags: row.tags || [],
       customFields: row.custom_fields || {},
       thumbnailUrl: row.thumbnail_url,
       gallery: row.gallery || [],
       stockLevel: row.stock_level || 0,
       version: row.version || 1,
       technicalSpecifications: [],
       colorVariants: [],
       createdAt: row.created_at,
       updatedAt: row.updated_at,
     }))
  } catch (error) {
    console.error("Error in getProducts:", error)
    return []
  }
}

export async function saveProduct(product: Partial<Product>): Promise<Product | null> {
  try {
    const productData = {
      sku: product.sku,
      name: product.name,
      description: product.description,
      technical_description: product.technicalDescription,
      photos: product.photos,
      infographics: product.infographics,
      colors: product.colors,
      category: product.category,
      sub: product.sub,
      thickness: product.thickness,
      sizes: product.sizes,
      pcs_per_box: product.pcsPerBox,
      box_kg: product.boxKg,
      box_m3: product.boxM3,
      min_order_boxes: product.minOrderBoxes,
      status: product.status,
      tags: product.tags,
      custom_fields: product.customFields,
      thumbnail_url: product.thumbnailUrl,
      gallery: product.gallery,
      stock_level: product.stockLevel,
      version: product.version,
      updated_at: new Date().toISOString(),
    }

    let result
    if (product.id) {
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
      result = await supabaseAdmin.from("products").update(productData).eq("id", product.id).select().single()
    } else {
      // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
      result = await supabaseAdmin.from("products").insert(productData).select().single()
    }

    if (result.error) {
      console.error("Error saving product:", result.error)
      return null
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç Product
    const row = result.data
         return {
       id: row.id,
       sku: row.sku,
       name: row.name,
       description: row.description,
       technicalDescription: row.technical_description,
       photos: row.photos || { main: row.thumbnail_url, others: [] },
       infographics: row.infographics || { main: "/abstract-geometric-shapes.png", others: [] },
       colors: row.colors || [],
       category: row.category,
       sub: row.sub,
       thickness: row.thickness || [],
       sizes: row.sizes || [],
       pcsPerBox: row.pcs_per_box || 0,
       boxKg: row.box_kg || 0,
       boxM3: row.box_m3 || 0,
       minOrderBoxes: row.min_order_boxes || 1,
       status: row.status,
       tags: row.tags || [],
       customFields: row.custom_fields || {},
       thumbnailUrl: row.thumbnail_url,
       gallery: row.gallery || [],
       stockLevel: row.stock_level || 0,
       version: row.version || 1,
       technicalSpecifications: [],
       colorVariants: [],
       createdAt: row.created_at,
       updatedAt: row.updated_at,
     }
  } catch (error) {
    console.error("Error in saveProduct:", error)
    return null
  }
}

export async function getCategories(): Promise<Category[]> {
  try {
    const { data, error } = await supabaseAdmin.from("categories").select("*").order("created_at", { ascending: false })

    if (error) {
      console.error("Error fetching categories:", error)
      return []
    }

         return (data || []).map((row: any) => ({
       id: row.id,
       name: row.name,
       slug: row.slug,
       subs: row.subs || [],
       createdAt: row.created_at,
       updatedAt: row.updated_at,
     }))
  } catch (error) {
    console.error("Error in getCategories:", error)
    return []
  }
}

export async function saveCategory(category: Partial<Category>): Promise<Category | null> {
  try {
    const categoryData = {
      name: category.name,
      slug: category.slug,
      // –£–±–∏—Ä–∞–µ–º subs - –æ–Ω–∏ —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏
      updated_at: new Date().toISOString(),
    }

    let result
    if (category.id) {
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      result = await supabaseAdmin.from("categories").update(categoryData).eq("id", category.id).select().single()
    } else {
      // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      result = await supabaseAdmin.from("categories").insert(categoryData).select().single()
    }

    if (result.error) {
      console.error("Error saving category:", result.error)
      return null
    }

    return {
      id: result.data.id,
      name: result.data.name,
      slug: result.data.slug,
      status: result.data.status, // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      subs: result.data.subs || [],
      createdAt: result.data.created_at,
      updatedAt: result.data.updated_at,
    }
  } catch (error) {
    console.error("Error in saveCategory:", error)
    return null
  }
}

export async function getCategoryById(id: string): Promise<Category | null> {
  try {
    const { data, error } = await supabaseAdmin.from("categories").select("*").eq("id", id).single()

    if (error) {
      console.error("Error fetching category by id:", error)
      return null
    }

    if (!data) return null

    return {
      id: data.id,
      name: data.name,
      slug: data.slug,
      status: data.status, // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      subs: data.subs || [],
      createdAt: data.created_at,
      updatedAt: data.updated_at,
    }
  } catch (error) {
    console.error("Error in getCategoryById:", error)
    return null
  }
}

export async function updateCategory(id: string, updates: Partial<Category>): Promise<Category | null> {
  try {
    const categoryData = {
      name: updates.name,
      slug: updates.slug,
      status: updates.status, // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å—Ç–∞—Ç—É—Å–∞
      // –£–±–∏—Ä–∞–µ–º subs - –æ–Ω–∏ —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏
      updated_at: new Date().toISOString(),
    }

    const { data, error } = await supabaseAdmin.from("categories").update(categoryData).eq("id", id).select().single()

    if (error) {
      console.error("Error updating category:", error)
      return null
    }

    return {
      id: data.id,
      name: data.name,
      slug: data.slug,
      status: data.status, // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ
      subs: data.subs || [],
      createdAt: data.created_at,
      updatedAt: data.updated_at,
    }
  } catch (error) {
    console.error("Error in updateCategory:", error)
    return null
  }
}

export async function deleteCategory(id: string): Promise<boolean> {
  try {
    const { error } = await supabaseAdmin.from("categories").delete().eq("id", id)

    if (error) {
      console.error("Error deleting category:", error)
      return false
    }

    return true
  } catch (error) {
    console.error("Error in deleteCategory:", error)
    return false
  }
}
